<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Colore</name>
    </assembly>
    <members>
        <member name="T:Colore.Api.ApiException">
            <inheritdoc />
            <summary>
            Thrown when a cal to an API function fails.
            </summary>
        </member>
        <member name="M:Colore.Api.ApiException.#ctor">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Api.ApiException" /> class.
            </summary>
        </member>
        <member name="M:Colore.Api.ApiException.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Api.ApiException" /> class.
            </summary>
            <param name="message">Message describing the exception.</param>
        </member>
        <member name="M:Colore.Api.ApiException.#ctor(System.String,System.Exception)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Api.ApiException" /> class.
            </summary>
            <param name="message">Message describing the exception.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Colore.Api.ApiException.#ctor(System.String,Colore.Data.Result)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Api.ApiException" /> class.
            </summary>
            <param name="message">An error message detailing the exception.</param>
            <param name="result">The result code returned from the SDK.</param>
        </member>
        <member name="P:Colore.Api.ApiException.Result">
            <summary>
            Gets the result code returned by the SDK.
            </summary>
        </member>
        <member name="T:Colore.Api.IChromaApi">
            <summary>
            Chroma API contract.
            </summary>
        </member>
        <member name="M:Colore.Api.IChromaApi.InitializeAsync(Colore.Data.AppInfo)">
            <summary>
            Initializes the Chroma SDK.
            </summary>
            <param name="info">Information about the application.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.UninitializeAsync">
            <summary>
            Uninitializes the Chroma SDK.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.QueryDeviceAsync(System.Guid)">
            <summary>
            Query for device information.
            </summary>
            <param name="deviceId">Device ID, found in <see cref="T:Colore.Data.Devices" />.</param>
            <returns>
            A populated <see cref="T:Colore.Data.SdkDeviceInfo" /> structure with information about the requested device.
            </returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.SetEffectAsync(System.Guid)">
            <summary>
            Set effect.
            </summary>
            <param name="effectId">Effect ID to set.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.DeleteEffectAsync(System.Guid)">
            <summary>
            Deletes an effect with the specified <see cref="T:System.Guid" />.
            </summary>
            <param name="effectId">Effect ID to delete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateDeviceEffectAsync(System.Guid,Colore.Effects.Generic.EffectType)">
            <summary>
            Creates a new device effect without any effect data.
            </summary>
            <param name="deviceId">The ID of the device to create the effect for.</param>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateDeviceEffectAsync``1(System.Guid,Colore.Effects.Generic.EffectType,``0)">
            <summary>
            Creates a new device effect with the specified effect data.
            </summary>
            <typeparam name="T">The structure type, needs to be compatible with the effect type.</typeparam>
            <param name="deviceId">The ID of the device to create the effect for.</param>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">The effect structure parameter.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateKeyboardEffectAsync(Colore.Effects.Keyboard.KeyboardEffectType)">
            <summary>
            Creates a new keyboard effect without any effect data.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateKeyboardEffectAsync``1(Colore.Effects.Keyboard.KeyboardEffectType,``0)">
            <summary>
            Creates a new keyboard effect with the specified effect data.
            </summary>
            <typeparam name="T">The structure type, needs to be compatible with the effect type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">The effect structure parameter.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateMouseEffectAsync(Colore.Effects.Mouse.MouseEffectType)">
            <summary>
            Creates a new mouse effect without any effect data.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateMouseEffectAsync``1(Colore.Effects.Mouse.MouseEffectType,``0)">
            <summary>
            Creates a new mouse effect with the specified effect data.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateHeadsetEffectAsync(Colore.Effects.Headset.HeadsetEffectType)">
            <summary>
            Creates a new headset effect without any effect data.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateHeadsetEffectAsync``1(Colore.Effects.Headset.HeadsetEffectType,``0)">
            <summary>
            Creates a new headset effect with the specified effect data.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateMousepadEffectAsync(Colore.Effects.Mousepad.MousepadEffectType)">
            <summary>
            Creates a new mousepad effect without any effect data.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateMousepadEffectAsync``1(Colore.Effects.Mousepad.MousepadEffectType,``0)">
            <summary>
            Creates a new mousepad effect with the specified effect data.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateKeypadEffectAsync(Colore.Effects.Keypad.KeypadEffectType)">
            <summary>
            Creates a new keypad effect without any effect data.
            </summary>
            <param name="effectType">THe type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateKeypadEffectAsync``1(Colore.Effects.Keypad.KeypadEffectType,``0)">
            <summary>
            Creates a new keypad effect with the specified effect data.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateChromaLinkEffectAsync(Colore.Effects.ChromaLink.ChromaLinkEffectType)">
            <summary>
            Creates a new Chroma Link effect without any effect data.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.CreateChromaLinkEffectAsync``1(Colore.Effects.ChromaLink.ChromaLinkEffectType,``0)">
            <summary>
            Creates a new Chroma Link effect with the specified effect data.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Api.IChromaApi.RegisterEventNotifications(System.IntPtr)">
            <summary>
            Registers for Chroma SDK notifications.
            </summary>
            <param name="windowHandle">App handle for the window handling events.</param>
        </member>
        <member name="M:Colore.Api.IChromaApi.UnregisterEventNotifications">
            <summary>
            Unregisters from receiving Chroma SDK notifications.
            </summary>
        </member>
        <member name="T:Colore.ColoreException">
            <inheritdoc />
            <summary>
            Generic Colore library exception.
            </summary>
        </member>
        <member name="M:Colore.ColoreException.#ctor">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.ColoreException" /> class.
            </summary>
        </member>
        <member name="M:Colore.ColoreException.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.ColoreException" /> class.
            </summary>
            <param name="message">Message describing the exception.</param>
        </member>
        <member name="M:Colore.ColoreException.#ctor(System.String,System.Exception)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.ColoreException" /> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception object.</param>
        </member>
        <member name="T:Colore.ColoreProvider">
            <summary>
            Provides helper methods to instantiate a new <see cref="T:Colore.IChroma" /> instance.
            </summary>
        </member>
        <member name="F:Colore.ColoreProvider.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.ColoreProvider._instance">
            <summary>
            Keeps track of the currently initialized <see cref="T:Colore.IChroma" /> instance.
            </summary>
        </member>
        <member name="M:Colore.ColoreProvider.CreateNativeAsync">
            <summary>
            Creates a new <see cref="T:Colore.IChroma" /> instance using the native Razer Chroma SDK.
            </summary>
            <returns>A new instance of <see cref="T:Colore.IChroma" />.</returns>
        </member>
        <member name="M:Colore.ColoreProvider.CreateRestAsync(Colore.Data.AppInfo,System.String)">
            <summary>
            Creates a new <see cref="T:Colore.IChroma" /> instance using the Chroma REST API.
            </summary>
            <param name="info">Information about the application.</param>
            <param name="endpoint">The endpoint to use for initializing the Chroma SDK.</param>
            <returns>A new instance of <see cref="T:Colore.IChroma" />.</returns>
        </member>
        <member name="M:Colore.ColoreProvider.CreateRestAsync(Colore.Data.AppInfo,System.Boolean)">
            <summary>
            Creates a new <see cref="T:Colore.IChroma" /> instance using the Chroma REST API.
            </summary>
            <param name="info">Information about the application.</param>
            <param name="ssl">Whether to use the HTTPS endpoint for SDK communication.</param>
            <returns>A new instance of <see cref="T:Colore.IChroma" />.</returns>
        </member>
        <member name="M:Colore.ColoreProvider.CreateRestAsync(Colore.Data.AppInfo,System.Uri)">
            <summary>
            Creates a new <see cref="T:Colore.IChroma" /> instance using the Chroma REST API.
            </summary>
            <param name="info">Information about the application.</param>
            <param name="endpoint">The endpoint to use for initializing the Chroma SDK.</param>
            <returns>A new instance of <see cref="T:Colore.IChroma" />.</returns>
        </member>
        <member name="M:Colore.ColoreProvider.CreateAsync(Colore.Data.AppInfo,Colore.Api.IChromaApi)">
            <summary>
            Creates a new <see cref="T:Colore.IChroma" /> instance using the specified API instance.
            </summary>
            <param name="info">Information about the application.</param>
            <param name="api">The API instance to use to route SDK calls.</param>
            <returns>A new instance of <see cref="T:Colore.IChroma" />.</returns>
        </member>
        <member name="M:Colore.ColoreProvider.ClearCurrentAsync">
            <summary>
            Clears the current <see cref="T:Colore.IChroma" /> instance, if necessary.
            </summary>
            <returns>An object representing the progress of this asynchronous task.</returns>
        </member>
        <member name="T:Colore.Data.ApiDeviceType">
            <summary>
            Devices types supported by the Chroma REST API.
            </summary>
        </member>
        <member name="F:Colore.Data.ApiDeviceType.Keyboard">
            <summary>
            A keyboard device.
            </summary>
        </member>
        <member name="F:Colore.Data.ApiDeviceType.Mouse">
            <summary>
            A mouse device.
            </summary>
        </member>
        <member name="F:Colore.Data.ApiDeviceType.Headset">
            <summary>
            A headset device.
            </summary>
        </member>
        <member name="F:Colore.Data.ApiDeviceType.Mousepad">
            <summary>
            A mousepad device.
            </summary>
        </member>
        <member name="F:Colore.Data.ApiDeviceType.Keypad">
            <summary>
            A keypad device.
            </summary>
        </member>
        <member name="F:Colore.Data.ApiDeviceType.ChromaLink">
            <summary>
            A Chroma Link device.
            </summary>
        </member>
        <member name="T:Colore.Data.AppInfo">
            <summary>
            Contains information about an application wishing to use the Chroma SDK.
            </summary>
        </member>
        <member name="M:Colore.Data.AppInfo.#ctor(System.String,System.String,System.String,System.String,Colore.Data.Category)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.AppInfo" /> class, set to support all available devices.
            </summary>
            <param name="title">Application title.</param>
            <param name="description">Application description.</param>
            <param name="authorName">Name of the application author.</param>
            <param name="authorContact">Contact information for the author.</param>
            <param name="category">Application category.</param>
        </member>
        <member name="M:Colore.Data.AppInfo.#ctor(System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Colore.Data.ApiDeviceType},Colore.Data.Category)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.AppInfo" /> class.
            </summary>
            <param name="title">Application title.</param>
            <param name="description">Application description.</param>
            <param name="authorName">Name of the application author.</param>
            <param name="authorContact">Contact information for the author.</param>
            <param name="supportedDevices">List of devices this application supports.</param>
            <param name="category">Application category.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if a required parameter is <c>null</c>.</exception>
        </member>
        <member name="P:Colore.Data.AppInfo.Title">
            <summary>
            Gets the title of this application.
            </summary>
        </member>
        <member name="P:Colore.Data.AppInfo.Description">
            <summary>
            Gets the application description.
            </summary>
        </member>
        <member name="P:Colore.Data.AppInfo.Author">
            <summary>
            Gets author information for this application.
            </summary>
        </member>
        <member name="P:Colore.Data.AppInfo.SupportedDevices">
            <summary>
            Gets a list of devices this application supports.
            </summary>
            <remarks>
            Newtonsoft.Json cannot deserialize into an <see cref="T:System.Collections.Generic.IEnumerable`1" />,
            but since we only serialize this class, it will not be an issue.
            </remarks>
        </member>
        <member name="P:Colore.Data.AppInfo.Category">
            <summary>
            Gets the category of this application.
            </summary>
        </member>
        <member name="T:Colore.Data.Author">
            <summary>
            Contains author information for a Chroma application.
            </summary>
        </member>
        <member name="M:Colore.Data.Author.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.Author" /> class.
            </summary>
            <param name="name">Name of the author.</param>
            <param name="contact">Contact information for the author.</param>
            <exception cref="T:System.ArgumentNullException">
            Thrown if <paramref name="name" /> or <paramref name="contact" /> are <c>null</c>.
            </exception>
        </member>
        <member name="P:Colore.Data.Author.Name">
            <summary>
            Gets the name of the application author.
            </summary>
        </member>
        <member name="P:Colore.Data.Author.Contact">
            <summary>
            Gets contact information for the author.
            </summary>
        </member>
        <member name="T:Colore.Data.Category">
            <summary>
            Chroma application categories.
            </summary>
        </member>
        <member name="F:Colore.Data.Category.Application">
            <summary>
            Application, anything that is not a game.
            </summary>
        </member>
        <member name="F:Colore.Data.Category.Game">
            <summary>
            Game or other interactive entertainment.
            </summary>
        </member>
        <member name="T:Colore.Data.Color">
            <inheritdoc cref="T:System.IEquatable`1" />
            <summary>
            Represents an RGB color.
            </summary>
            <summary>
            Represents an RGB color.
            </summary>
        </member>
        <member name="M:Colore.Data.Color.#ctor(System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.Color" /> struct using an integer
            color value in the format <c>0xKKBBGGRR</c>.
            </summary>
            <param name="value">Value to create the color from.</param>
        </member>
        <member name="M:Colore.Data.Color.#ctor(System.Byte,System.Byte,System.Byte)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.Color" /> struct using three
            distinct R, G, and B byte values.
            </summary>
            <param name="red">The red component.</param>
            <param name="green">The green component.</param>
            <param name="blue">The blue component.</param>
        </member>
        <member name="M:Colore.Data.Color.#ctor(System.Single,System.Single,System.Single)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.Color" /> struct using
            three <see cref="T:System.Single" /> values for the R, G, and B channels.
            </summary>
            <param name="red">The red component (<c>0.0f</c> to <c>1.0f</c>, inclusive).</param>
            <param name="green">The green component (<c>0.0f</c> to <c>1.0f</c>, inclusive).</param>
            <param name="blue">The blue component (<c>0.0f</c> to <c>1.0f</c>, inclusive).</param>
            <remarks>
            Each parameter value must be between <c>0.0f</c> and <c>1.0f</c> (inclusive).
            </remarks>
        </member>
        <member name="M:Colore.Data.Color.#ctor(System.Double,System.Double,System.Double)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.Color" /> struct using
            three <see cref="T:System.Double" /> values for the R, G, and B channels.
            </summary>
            <param name="red">The red component (<c>0.0</c> to <c>1.0</c>, inclusive).</param>
            <param name="green">The green component (<c>0.0</c> to <c>1.0</c>, inclusive).</param>
            <param name="blue">The blue component (<c>0.0</c> to <c>1.0</c>, inclusive).</param>
            <remarks>
            Each parameter value must be between <c>0.0</c> and <c>1.0</c> (inclusive).
            </remarks>
        </member>
        <member name="P:Colore.Data.Color.B">
            <summary>
            Gets the blue component of the color as a byte.
            </summary>
        </member>
        <member name="P:Colore.Data.Color.G">
            <summary>
            Gets the green component of the color as a byte.
            </summary>
        </member>
        <member name="P:Colore.Data.Color.R">
            <summary>
            Gets the red component of the color as a byte.
            </summary>
        </member>
        <member name="P:Colore.Data.Color.Value">
            <summary>
            Gets the unsigned integer representing
            the color. On the form <c>0xKKBBGGRR</c>.
            </summary>
        </member>
        <member name="P:Colore.Data.Color.AsKeyColor">
            <summary>
            Gets a version of this color with the key bit set.
            </summary>
        </member>
        <member name="P:Colore.Data.Color.AsRegularColor">
            <summary>
            Gets a version of this color without the key bit set.
            </summary>
        </member>
        <member name="M:Colore.Data.Color.op_Implicit(Colore.Data.Color)~System.UInt32">
            <summary>
            Converts a <see cref="T:Colore.Data.Color" /> struct to a <see cref="T:System.UInt32" />.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to convert.</param>
            <returns>A <see cref="T:System.UInt32" /> representing the value of the <paramref name="color" /> argument.</returns>
            <remarks>The returned <see cref="T:System.UInt32" /> has a format of <c>0xAABBGGRR</c>.</remarks>
        </member>
        <member name="M:Colore.Data.Color.op_Implicit(System.UInt32)~Colore.Data.Color">
            <summary>
            Converts a <c>uint</c> <paramref name="value" /> in the format of <c>0xAABBGGRR</c>
            to a new instance of the <see cref="T:Colore.Data.Color" /> struct.
            </summary>
            <param name="value">The <see cref="T:System.UInt32" /> to convert, on the form <c>0x00BBGGRR</c>.</param>
            <returns>An instance of <see cref="T:Colore.Data.Color" /> representing the color value of <paramref name="value" />.</returns>
        </member>
        <member name="M:Colore.Data.Color.op_Equality(Colore.Data.Color,System.Object)">
            <summary>
            Checks <paramref name="left" /> and <paramref name="right" /> for equality.
            </summary>
            <param name="left">Left operand, an instance of the <see cref="T:Colore.Data.Color" /> struct.</param>
            <param name="right">Right operand, an <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the two instances are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Colore.Data.Color.op_Inequality(Colore.Data.Color,System.Object)">
            <summary>
            Checks <paramref name="left" /> and <paramref name="right" /> for inequality.
            </summary>
            <param name="left">Left operand, an instance of the <see cref="T:Colore.Data.Color" /> struct.</param>
            <param name="right">Right operand, an <see cref="T:System.Object" />.</param>
            <returns><c>true</c> if the two instances are not equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Colore.Data.Color.FromRgb(System.UInt32)">
            <summary>
            Creates a new <see cref="T:Colore.Data.Color" /> from an RGB integer value
            in the format of <c>0xRRGGBB</c>.
            </summary>
            <param name="value">The RGB value to convert from.</param>
            <returns>A new instance of the <see cref="T:Colore.Data.Color" /> struct.</returns>
        </member>
        <member name="M:Colore.Data.Color.ToColor(System.UInt32)">
            <summary>
            Converts an unsigned integer value to a <see cref="T:Colore.Data.Color" /> object.
            </summary>
            <param name="value">The value to convert.</param>
            <returns><see cref="T:Colore.Data.Color" /> representation of the value.</returns>
            <remarks>This is an alias for <see cref="M:Colore.Data.Color.FromRgb(System.UInt32)" />.</remarks>
            <seealso cref="M:Colore.Data.Color.FromRgb(System.UInt32)" />
        </member>
        <member name="M:Colore.Data.Color.ToUInt32">
            <summary>
            Converts this instance of <see cref="T:Colore.Data.Color" /> to an unsigned integer value.
            </summary>
            <returns>The unsigned integer value of this <see cref="T:Colore.Data.Color" />.</returns>
        </member>
        <member name="M:Colore.Data.Color.Equals(System.Object)">
            <summary>
            Returns a value indicating whether this instance of <see cref="T:Colore.Data.Color" />
            is equal to an <see cref="T:System.Object" /> <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:System.Object" /> to check equality against.</param>
            <returns><c>true</c> if the two are equal, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Colore.Data.Color.Equals(Colore.Data.Color)">
            <inheritdoc />
            <summary>
            Returns a value indicating whether this instance of <see cref="T:Colore.Data.Color" />
            is equal to a <see cref="T:Colore.Data.Color" /> <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:Colore.Data.Color" /> to check equality against.</param>
            <returns><c>true</c> of the two are equal, false otherwise.</returns>
            <remarks>
            Only compares the lower 32 bits of each color value, in order to
            be able to compare a keymode color to a non-keymode color.
            </remarks>
        </member>
        <member name="M:Colore.Data.Color.Equals(System.UInt32)">
            <inheritdoc />
            <summary>
            Returns a value indicating whether this instance of <see cref="T:Colore.Data.Color" />
            is equal to a <see cref="T:System.UInt32" /> <paramref name="other" />.
            </summary>
            <param name="other">The <see cref="T:System.UInt32" /> to check equality against.</param>
            <returns><c>true</c> if the two are equal, <c>false</c> otherwise.</returns>
            <remarks>
            Only compares the lower 32 bits of each value, in order to
            be able to compare a keymode color to a non-keymode color.
            </remarks>
        </member>
        <member name="M:Colore.Data.Color.ToString">
            <inheritdoc />
            <summary>
            Returns a string representation of this color's red, green, and blue values.
            </summary>
            <returns>A <see cref="T:System.String" /> containing a string representation of this color.</returns>
        </member>
        <member name="M:Colore.Data.Color.GetHashCode">
            <summary>
            Gets the unique hash code for this <see cref="T:Colore.Data.Color" />.
            </summary>
            <returns>A unique has code.</returns>
        </member>
        <member name="F:Colore.Data.Color.Black">
            <summary>
            Black color.
            </summary>
        </member>
        <member name="F:Colore.Data.Color.Blue">
            <summary>
            (Dark) blue color.
            </summary>
        </member>
        <member name="F:Colore.Data.Color.Green">
            <summary>
            (Neon/bright) green color.
            </summary>
        </member>
        <member name="F:Colore.Data.Color.HotPink">
            <summary>
            Hot pink color.
            </summary>
        </member>
        <member name="F:Colore.Data.Color.Orange">
            <summary>
            Orange color.
            </summary>
        </member>
        <member name="F:Colore.Data.Color.Pink">
            <summary>
            Pink color.
            </summary>
        </member>
        <member name="F:Colore.Data.Color.Purple">
            <summary>
            Purple color.
            </summary>
        </member>
        <member name="F:Colore.Data.Color.Red">
            <summary>
            Red color.
            </summary>
        </member>
        <member name="F:Colore.Data.Color.White">
            <summary>
            White color.
            </summary>
        </member>
        <member name="F:Colore.Data.Color.Yellow">
            <summary>
            Yellow color.
            </summary>
        </member>
        <member name="T:Colore.Data.Constants">
            <summary>
            The definitions of generic constant values used in the project.
            </summary>
        </member>
        <member name="F:Colore.Data.Constants.MaxRows">
            <summary>
            Maximum number of rows for a generic custom effect.
            </summary>
        </member>
        <member name="F:Colore.Data.Constants.MaxColumns">
            <summary>
            Maximum number of columns for a generic custom effect.
            </summary>
        </member>
        <member name="F:Colore.Data.Constants.MaxColors">
            <summary>
            Maximum number of color entries for a generic custom effect.
            </summary>
        </member>
        <member name="F:Colore.Data.Constants.WmChromaEvent">
            <summary>
            Used by Razer code to send Chroma event messages.
            </summary>
        </member>
        <member name="F:Colore.Data.Constants.MaxAppTitleLength">
            <summary>
            Max size of an application title.
            </summary>
        </member>
        <member name="F:Colore.Data.Constants.MaxAppDescriptionLength">
            <summary>
            Max size of an application description.
            </summary>
        </member>
        <member name="F:Colore.Data.Constants.MaxAuthorNameLength">
            <summary>
            Max size of an author name.
            </summary>
        </member>
        <member name="F:Colore.Data.Constants.MaxAuthorContactLength">
            <summary>
            Max size of an author's contact information.
            </summary>
        </member>
        <member name="F:Colore.Data.Constants.WmApp">
            <summary>
            Used to define private messages, usually of the form WM_APP+x, where x is an integer value.
            </summary>
            <remarks>
            The <strong>WM_APP</strong> constant is used to distinguish between message values
            that are reserved for use by the system and values that can be used by an
            application to send messages within a private window class.
            </remarks>
        </member>
        <member name="T:Colore.Data.DeviceInfo">
            <inheritdoc />
            <summary>
            Contains information about a device.
            </summary>
        </member>
        <member name="M:Colore.Data.DeviceInfo.#ctor(Colore.Data.SdkDeviceInfo,System.Guid,Colore.Data.Devices.Metadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.DeviceInfo" /> struct.
            </summary>
            <param name="baseInfo">Instance of <see cref="T:Colore.Data.SdkDeviceInfo" /> to copy base data from.</param>
            <param name="deviceId">The ID of the device.</param>
            <param name="metadata">Instance of <see cref="T:Colore.Data.Devices.Metadata" /> to copy metadata from.</param>
        </member>
        <member name="P:Colore.Data.DeviceInfo.Id">
            <summary>
            Gets the unique ID of the device.
            </summary>
        </member>
        <member name="P:Colore.Data.DeviceInfo.Type">
            <summary>
            Gets the type of the device.
            </summary>
        </member>
        <member name="P:Colore.Data.DeviceInfo.Connected">
            <summary>
            Gets a value indicating whether the device is currently connected.
            </summary>
        </member>
        <member name="P:Colore.Data.DeviceInfo.Name">
            <summary>
            Gets the device name.
            </summary>
        </member>
        <member name="P:Colore.Data.DeviceInfo.Description">
            <summary>
            Gets a description of the device.
            </summary>
        </member>
        <member name="M:Colore.Data.DeviceInfo.op_Equality(Colore.Data.DeviceInfo,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Data.DeviceInfo" /> with
            another object for equality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Data.DeviceInfo" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.DeviceInfo.op_Inequality(Colore.Data.DeviceInfo,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Data.DeviceInfo" /> with
            another object for inequality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Data.DeviceInfo" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.DeviceInfo.Equals(Colore.Data.DeviceInfo)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Data.DeviceInfo.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance.</param>
            <returns>
            <c>true</c> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Data.DeviceInfo.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Colore.Data.Devices">
            <summary>
            Contains device IDs for devices that have Chroma support.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Blackwidow">
            <summary>
            Blackwidow Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Deathadder">
            <summary>
            Deathadder Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Kraken71">
            <summary>
            Kraken 7.1 Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Firefly">
            <summary>
            Firefly Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Orbweaver">
            <summary>
            Orbweaver Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Tartarus">
            <summary>
            Tartarus Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.MambaTe">
            <summary>
            Mamba TE Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.BlackwidowTe">
            <summary>
            BlackWidow TE Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Deathstalker">
            <summary>
            Deathstalker Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Diamondback">
            <summary>
            Diamondback Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Orochi">
            <summary>
            Orochi Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.BladeStealth">
            <summary>
            Blade Stealth.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Blade14">
            <summary>
            Blade 14 (2016 edition).
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.OverwatchKeyboard">
            <summary>
            Overwatch Keyboard.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.BlackwidowX">
            <summary>
            Blackwidow X Keyboard.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.BlackwidowXTe">
            <summary>
            Blackwidow X TE Keyboard.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Mamba">
            <summary>
            Mamba (wireless) Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Naga">
            <summary>
            Naga Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.NagaEpic">
            <summary>
            Naga Epic Chroma edition.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.NagaHex">
            <summary>
            Naga Hex V2.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Core">
            <summary>
            Core (external graphics enclosure).
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.LenovoY900">
            <summary>
            Chroma enabled Lenovo Y900.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.LenovoY27">
            <summary>
            Chroma enabled Lenovo Y27.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.Ornata">
            <summary>
            Razer Ornata Keyboard.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices.MetadataCache">
            <summary>
            Dictionary holding cached metadata for each device GUID.
            </summary>
        </member>
        <member name="F:Colore.Data.Devices._cacheBuilt">
            <summary>
            Boolean value keeping track of if the metadata cache has been built.
            </summary>
        </member>
        <member name="M:Colore.Data.Devices.IsValidId(System.Guid)">
            <summary>
            Returns whether a specified <see cref="T:System.Guid" /> is a valid device identifier.
            </summary>
            <param name="id">the <see cref="T:System.Guid" /> to check.</param>
            <returns><c>true</c> if it's a valid device identifier, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.Devices.GetName(System.Guid)">
            <summary>
            Gets the name associated with a specified device ID.
            </summary>
            <param name="deviceId">The device ID to get a name for.</param>
            <returns>The name of the device.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the device ID is invalid.</exception>
        </member>
        <member name="M:Colore.Data.Devices.GetDescription(System.Guid)">
            <summary>
            Gets the description associated with a specified device ID.
            </summary>
            <param name="deviceId">The device ID to get a description for.</param>
            <returns>The description of the device.</returns>
            <exception cref="T:System.ArgumentException">Thrown if the device ID is invalid.</exception>
        </member>
        <member name="M:Colore.Data.Devices.GetDeviceMetadata(System.Guid)">
            <summary>
            Gets device metadata for a specific device ID.
            </summary>
            <param name="deviceId">The device ID to get metadata for.</param>
            <returns>An instance of <see cref="T:Colore.Data.Devices.Metadata" /> for the specified device.</returns>
        </member>
        <member name="M:Colore.Data.Devices.BuildMetadataCache">
            <summary>
            Builds the metadata cache.
            </summary>
        </member>
        <member name="M:Colore.Data.Devices.BuildMetadataCacheWithId(System.Guid)">
            <summary>
            Builds the metadata cache and returns cache entry for the specified device ID.
            </summary>
            <param name="deviceId">Device ID to return metadata for.</param>
            <returns>An instance of <see cref="T:Colore.Data.Devices.Metadata" /> for the specified device.</returns>
        </member>
        <member name="T:Colore.Data.Devices.Metadata">
            <summary>
            Holds metadata for a device.
            </summary>
        </member>
        <member name="M:Colore.Data.Devices.Metadata.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.Devices.Metadata" /> struct.
            </summary>
            <param name="name">Device name.</param>
            <param name="description">Device description.</param>
        </member>
        <member name="P:Colore.Data.Devices.Metadata.Name">
            <summary>
            Gets the name of the device.
            </summary>
        </member>
        <member name="P:Colore.Data.Devices.Metadata.Description">
            <summary>
            Gets a description of the device.
            </summary>
        </member>
        <member name="T:Colore.Data.DeviceType">
            <summary>
            Device types supported by the Chroma SDK.
            </summary>
        </member>
        <member name="F:Colore.Data.DeviceType.Unknown">
            <summary>
            Unknown device.
            </summary>
        </member>
        <member name="F:Colore.Data.DeviceType.Keyboard">
            <summary>
            A keyboard device.
            </summary>
        </member>
        <member name="F:Colore.Data.DeviceType.Mouse">
            <summary>
            A mouse device.
            </summary>
        </member>
        <member name="F:Colore.Data.DeviceType.Headset">
            <summary>
            A headset device.
            </summary>
        </member>
        <member name="F:Colore.Data.DeviceType.Mousepad">
            <summary>
            A mouse pad.
            </summary>
        </member>
        <member name="F:Colore.Data.DeviceType.Keypad">
            <summary>
            A keypad.
            </summary>
        </member>
        <member name="F:Colore.Data.DeviceType.System">
            <summary>
            System device.
            </summary>
        </member>
        <member name="F:Colore.Data.DeviceType.Speakers">
            <summary>
            Speaker devices.
            </summary>
        </member>
        <member name="F:Colore.Data.DeviceType.Invalid">
            <summary>
            Invalid device.
            </summary>
        </member>
        <member name="T:Colore.Data.Result">
            <inheritdoc cref="T:System.IEquatable`1" />
            <summary>
            Struct for containing the result of running a native Chroma SDK function.
            </summary>
            <remarks>
            <c>RZRESULT</c> is a <c>typedef</c> of <c>LONG</c> on C-side. <c>LONG</c> is always 32-bit in WinAPI.
            This means we don't need to have architecture-dependent base type.
            </remarks>
        </member>
        <member name="F:Colore.Data.Result.DeviceNotConnected">
            <summary>
            The device is not connected.
            </summary>
        </member>
        <member name="F:Colore.Data.Result.RzAccessDenied">
            <summary>
            Access denied.
            </summary>
        </member>
        <member name="F:Colore.Data.Result.RzFailed">
            <summary>
            Generic fail error.
            </summary>
        </member>
        <member name="F:Colore.Data.Result.RzInvalid">
            <summary>
            Invalid error.
            </summary>
        </member>
        <member name="F:Colore.Data.Result.RzInvalidParameter">
            <summary>
            Invalid parameter passed to function.
            </summary>
        </member>
        <member name="F:Colore.Data.Result.RzNotSupported">
            <summary>
            The requested operation is not supported.
            </summary>
        </member>
        <member name="F:Colore.Data.Result.RzRequestAborted">
            <summary>
            The request was aborted.
            </summary>
        </member>
        <member name="F:Colore.Data.Result.RzResourceDisabled">
            <summary>
            Resource not available or disabled.
            </summary>
        </member>
        <member name="F:Colore.Data.Result.RzSingleInstanceApp">
            <summary>
            Cannot start more than one instance of the specified program.
            </summary>
        </member>
        <member name="F:Colore.Data.Result.RzSuccess">
            <summary>
            Returned when a function is successful.
            </summary>
        </member>
        <member name="F:Colore.Data.Result.Mappings">
            <summary>
            Contains a mapping of result codes to their names and descriptions.
            </summary>
        </member>
        <member name="M:Colore.Data.Result.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.Result" /> struct.
            </summary>
            <param name="value">Value to store.</param>
        </member>
        <member name="P:Colore.Data.Result.Value">
            <summary>
            Gets the internal result value.
            </summary>
        </member>
        <member name="P:Colore.Data.Result.Description">
            <summary>
            Gets the help description for the current error value.
            </summary>
        </member>
        <member name="P:Colore.Data.Result.Failed">
            <summary>
            Gets a value indicating whether the result means failure.
            </summary>
        </member>
        <member name="P:Colore.Data.Result.Name">
            <summary>
            Gets the name of the error as defined in source code.
            </summary>
        </member>
        <member name="P:Colore.Data.Result.Success">
            <summary>
            Gets a value indicating whether the result was a success.
            </summary>
        </member>
        <member name="P:Colore.Data.Result.IsTrue">
            <summary>
            Gets a value indicating whether this instance of <see cref="T:Colore.Data.Result" /> is truthy.
            </summary>
            <returns><c>true</c> if this is a successful result, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.Result.op_Equality(Colore.Data.Result,System.Object)">
            <summary>
            Indicates whether an instance of the <see cref="T:Colore.Data.Result" /> struct is
            equal to another object.
            </summary>
            <param name="left">Left operand, an instance of the <see cref="T:Colore.Data.Result" /> struct.</param>
            <param name="right">Right operand, an object to compare with.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.Result.op_False(Colore.Data.Result)">
            <summary>
            Converts a <see cref="T:Colore.Data.Result" /> object to <c>false</c>.
            </summary>
            <param name="result"><see cref="T:Colore.Data.Result" /> object to convert.</param>
            <returns>
            <c>false</c> if the <see cref="T:Colore.Data.Result" /> object represents a boolean <c>false</c> value,
            otherwise <c>true</c>.
            </returns>
        </member>
        <member name="M:Colore.Data.Result.op_Implicit(Colore.Data.Result)~System.Int32">
            <summary>
            Converts a <see cref="T:Colore.Data.Result" /> struct to its integer equivalent.
            </summary>
            <param name="result">An instance of the <see cref="T:Colore.Data.Result" /> to convert.</param>
            <returns>The integer equivalent of the <paramref name="result" />.</returns>
        </member>
        <member name="M:Colore.Data.Result.op_Implicit(System.Int32)~Colore.Data.Result">
            <summary>
            Converts an integer value to its equivalent <see cref="T:Colore.Data.Result" /> object.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>The <see cref="T:Colore.Data.Result" /> equivalent of the <paramref name="value" />.</returns>
        </member>
        <member name="M:Colore.Data.Result.op_Implicit(Colore.Data.Result)~System.Boolean">
            <summary>
            Converts an instance of the <see cref="T:Colore.Data.Result" /> struct to its boolean equivalent.
            </summary>
            <param name="result">The <see cref="T:Colore.Data.Result" /> to convert.</param>
            <returns>
            <c>true</c> if the <paramref name="result" /> represents a <c>true</c> value (success),
            otherwise <c>false</c> (failure).
            </returns>
        </member>
        <member name="M:Colore.Data.Result.op_Inequality(Colore.Data.Result,System.Object)">
            <summary>
            Indicates whether an instance of the <see cref="T:Colore.Data.Result" /> struct and
            another object are not equal.
            </summary>
            <param name="left">Left operand, an instance of the <see cref="T:Colore.Data.Result" /> struct.</param>
            <param name="right">Right operand, an object to compare to.</param>
            <returns><c>true</c> if the two objects are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.Result.op_True(Colore.Data.Result)">
            <summary>
            Converts a <see cref="T:Colore.Data.Result" /> object to a boolean <c>true</c> value.
            </summary>
            <param name="result">Object to convert.</param>
            <returns><c>true</c> if the object represents a boolean <c>true</c> value, <c>false</c> otherwise.</returns>
        </member>
        <member name="M:Colore.Data.Result.FromResult(System.Int32)">
            <summary>
            Convert an integer value to a <see cref="T:Colore.Data.Result" /> object.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An instance of <see cref="T:Colore.Data.Result" />.</returns>
        </member>
        <member name="M:Colore.Data.Result.FromInt32(System.Int32)">
            <summary>
            Convert an integer value to a <see cref="T:Colore.Data.Result" /> object.
            </summary>
            <param name="value">The value to convert.</param>
            <returns>An instance of <see cref="T:Colore.Data.Result" />.</returns>
        </member>
        <member name="M:Colore.Data.Result.ToInt32">
            <summary>
            Converts this instance of <see cref="T:Colore.Data.Result" /> to an integer value.
            </summary>
            <returns>The integer value of this <see cref="T:Colore.Data.Result" />.</returns>
        </member>
        <member name="M:Colore.Data.Result.ToBoolean">
            <summary>
            Converts this <see cref="T:Colore.Data.Result" /> to a boolean value.
            </summary>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Colore.Data.Result.Equals(System.Int32)">
            <inheritdoc />
            <summary>
            Indicates whether the internal value of the current <see cref="T:Colore.Data.Result" /> struct
            is equal to another value.
            </summary>
            <param name="other">A value to compare with this object's internal value.</param>
            <returns><c>true</c> if the internal value is equal to the <paramref name="other" /> parameter, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.Result.Equals(Colore.Data.Result)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Data.Result.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to. </param>
            <returns>
            <c>true</c> if <paramref name="obj"/> and this instance are the same type
            and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Data.Result.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Colore.Data.Result.ToString">
            <summary>
            Returns a string representation of the result.
            </summary>
            <returns>
            A <see cref="T:System.String"/> containing a string representation
            of the result complete with name, description, and numeric value.
            </returns>
        </member>
        <member name="T:Colore.Data.SdkDeviceInfo">
            <inheritdoc />
            <summary>
            Information about a device.
            </summary>
        </member>
        <member name="F:Colore.Data.SdkDeviceInfo.Type">
            <summary>
            The type of device this is.
            </summary>
        </member>
        <member name="F:Colore.Data.SdkDeviceInfo.ConnectedCount">
            <summary>
            The number of connected devices of the given type.
            </summary>
            <remarks>
            This property is the <c>DWORD</c> field <c>Connected</c> in the SDK type <c>DEVICE_INFO_TYPE</c>.
            In Colore we rename it ConnectedCount to be more descriptive and have the helper
            <see cref="P:Colore.Data.SdkDeviceInfo.Connected" /> property for doing boolean checks on connected-ness.
            </remarks>
        </member>
        <member name="M:Colore.Data.SdkDeviceInfo.#ctor(Colore.Data.DeviceType,System.UInt32)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.SdkDeviceInfo" /> struct.
            </summary>
            <param name="type">The type of device.</param>
            <param name="connectedCount">The number of connected devices for the type.</param>
        </member>
        <member name="P:Colore.Data.SdkDeviceInfo.Connected">
            <summary>
            Gets a value indicating whether this device is connected.
            </summary>
        </member>
        <member name="M:Colore.Data.SdkDeviceInfo.op_Equality(Colore.Data.SdkDeviceInfo,Colore.Data.SdkDeviceInfo)">
            <summary>
            Checks an instance of <see cref="T:Colore.Data.SdkDeviceInfo" /> for equality with another <see cref="T:Colore.Data.SdkDeviceInfo" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.SdkDeviceInfo.op_Inequality(Colore.Data.SdkDeviceInfo,Colore.Data.SdkDeviceInfo)">
            <summary>
            Checks an instance of <see cref="T:Colore.Data.SdkDeviceInfo" /> for inequality with another <see cref="T:Colore.Data.SdkDeviceInfo" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.SdkDeviceInfo.Equals(Colore.Data.SdkDeviceInfo)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Data.SdkDeviceInfo.Equals(System.Object)">
            <inheritdoc />
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>
            <c>true</c> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Data.SdkDeviceInfo.GetHashCode">
            <inheritdoc />
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Colore.Data.SdkVersion">
            <inheritdoc cref="T:System.IEquatable`1" />
            <inheritdoc cref="T:System.IComparable`1" />
            <inheritdoc cref="T:System.IComparable" />
            <summary>
            Describes an SDK version.
            </summary>
        </member>
        <member name="M:Colore.Data.SdkVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Data.SdkVersion" /> struct.
            </summary>
            <param name="major">The major component of the version.</param>
            <param name="minor">The minor component of the version.</param>
            <param name="revision">The revision component of the version.</param>
        </member>
        <member name="P:Colore.Data.SdkVersion.Major">
            <summary>
            Gets the major part of the version.
            </summary>
        </member>
        <member name="P:Colore.Data.SdkVersion.Minor">
            <summary>
            Gets the minor part of the version.
            </summary>
        </member>
        <member name="P:Colore.Data.SdkVersion.Revision">
            <summary>
            Gets the revision part of the version.
            </summary>
        </member>
        <member name="M:Colore.Data.SdkVersion.op_Equality(Colore.Data.SdkVersion,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Data.SdkVersion" /> with
            another object for equality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Data.SdkVersion" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.SdkVersion.op_Inequality(Colore.Data.SdkVersion,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Data.SdkVersion" /> with
            another object for inequality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Data.SdkVersion" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.SdkVersion.op_LessThan(Colore.Data.SdkVersion,System.Object)">
            <summary>
            Checks if an instance of <see cref="T:Colore.Data.SdkVersion" /> is considered
            less than another object.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Data.SdkVersion" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if <paramref name="left" /> is less than <paramref name="right" />, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.SdkVersion.op_GreaterThan(Colore.Data.SdkVersion,System.Object)">
            <summary>
            Checks if an instance of <see cref="T:Colore.Data.SdkVersion" /> is considered
            greater than another object.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Data.SdkVersion" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if <paramref name="left" /> is greater than <paramref name="right" />, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.SdkVersion.op_LessThanOrEqual(Colore.Data.SdkVersion,System.Object)">
            <summary>
            Checks if an instance of <see cref="T:Colore.Data.SdkVersion" /> is considered
            to be less than or equal to another object.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Data.SdkVersion" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if <paramref name="left" /> is less than or equal to <paramref name="right" />, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.SdkVersion.op_GreaterThanOrEqual(Colore.Data.SdkVersion,System.Object)">
            <summary>
            Checks if an instance of <see cref="T:Colore.Data.SdkVersion" /> is considered
            to be greater than or equal to another object.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Data.SdkVersion" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if <paramref name="left" /> is greater than or equal to <paramref name="right" />, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Data.SdkVersion.Equals(Colore.Data.SdkVersion)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            true if the current object is equal to the <paramref name="other" /> parameter; otherwise, false.
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Colore.Data.SdkVersion.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            true if <paramref name="obj"/> and this instance are the same type and represent the same value; otherwise, false.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:Colore.Data.SdkVersion.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Colore.Data.SdkVersion.CompareTo(Colore.Data.SdkVersion)">
            <inheritdoc />
            <summary>
            Compares the current object with another object of the same type.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared.
            The return value has the following meanings:
            <list type="table">
            <listheader>
            <item>Value</item>
            <item>Meaning</item>
            </listheader>
            <item>
            <term>Less than zero</term>
            <term>This object is less than the <paramref name="other" /> parameter</term>
            </item>
            <item>
            <term>Zero</term>
            <term>This object is equal to <paramref name="other" /></term>
            </item>
            <item>
            <term>Greater than zero</term>
            <term>This object is greater than <paramref name="other" /></term>
            </item>
            </list>
            </returns>
            <param name="other">An object to compare with this object.</param>
        </member>
        <member name="M:Colore.Data.SdkVersion.CompareTo(System.Object)">
            <inheritdoc />
            <summary>
            Compares the current instance with another object of the same type and returns an integer that indicates
            whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object.
            </summary>
            <returns>
            A 32-bit signed integer that indicates the relative order of the objects being compared. The return value has these meanings:
            <list type="table">
            <listheader>
            <item>Value</item>
            <item>Meaning</item>
            </listheader>
            <item>
            <term>Less than zero</term>
            <term>This object is less than the <paramref name="obj" /> parameter</term>
            </item>
            <item>
            <term>Zero</term>
            <term>This object is equal to <paramref name="obj" /></term>
            </item>
            <item>
            <term>Greater than zero</term>
            <term>This object is greater than <paramref name="obj" /></term>
            </item>
            </list>
            </returns>
            <param name="obj">An object to compare with this instance. </param>
            <exception cref="T:System.ArgumentException"><paramref name="obj" /> is not the same type as this instance. </exception>
        </member>
        <member name="M:Colore.Data.SdkVersion.ToString">
            <summary>
            Returns the string representation of this SDK version.
            </summary>
            <returns>
            A <see cref="T:System.String"/> representing this struct instance.
            </returns>
        </member>
        <member name="T:Colore.Effects.ChromaLink.ChromaLinkConstants">
            <summary>
            Chroma Link constants.
            </summary>
        </member>
        <member name="F:Colore.Effects.ChromaLink.ChromaLinkConstants.MaxLeds">
            <summary>
            Maximum number of LEDs.
            </summary>
        </member>
        <member name="T:Colore.Effects.ChromaLink.ChromaLinkEffectType">
            <summary>
            Supported built-in Chroma Link effects.
            </summary>
        </member>
        <member name="F:Colore.Effects.ChromaLink.ChromaLinkEffectType.None">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.ChromaLink.ChromaLinkEffectType.Custom">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.ChromaLink.ChromaLinkEffectType.Static">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.ChromaLink.ChromaLinkEffectType.Invalid">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect">
            <inheritdoc />
            <summary>
            Custom effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.ChromaLink.CustomChromaLinkEffect._colors">
            <summary>
            Color definitions for each element in Chroma Link.
            </summary>
            <remarks>
            The array is 1-dimensional
            according to: <see cref="F:Colore.Effects.ChromaLink.ChromaLinkConstants.MaxLeds" />.
            </remarks>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.#ctor(Colore.Data.Color[])">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> struct.
            </summary>
            <param name="colors">The colors to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="colors" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the colors array supplied is of an incorrect size.</exception>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.#ctor(System.Collections.Generic.IList{Colore.Data.Color})">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> struct.
            </summary>
            <param name="colors">The colors to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="colors" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the colors array supplied is of an invalid size.</exception>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> struct
            with every position set to a specific color.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set each position to.</param>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.#ctor(Colore.Effects.ChromaLink.CustomChromaLinkEffect)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> struct
            with color values copied from another struct of the same type.
            </summary>
            <param name="other">The struct to copy data from.</param>
        </member>
        <member name="P:Colore.Effects.ChromaLink.CustomChromaLinkEffect.Colors">
            <summary>
            Gets the backing array for the <see cref="T:Colore.Data.Color" /> data.
            </summary>
        </member>
        <member name="P:Colore.Effects.ChromaLink.CustomChromaLinkEffect.Item(System.Int32)">
            <summary>
            Gets or sets a position in the custom array.
            </summary>
            <param name="index">The index to access, zero indexed.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.op_Equality(Colore.Effects.ChromaLink.CustomChromaLinkEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> with
            another object for equality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.op_Inequality(Colore.Effects.ChromaLink.CustomChromaLinkEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> with
            another object for inequality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.Create">
            <summary>
            Creates a new empty <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> struct.
            </summary>
            <returns>An instance of <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" />
            filled with the color black.</returns>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.Clone">
            <summary>
            Returns a copy of this struct.
            </summary>
            <returns>A copy of this struct.</returns>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.Set(Colore.Data.Color)">
            <summary>
            Sets all LED indices to the specified <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set.</param>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.Clear">
            <summary>
            Clears the colors from the array, setting them to <see cref="F:Colore.Data.Color.Black" />.
            </summary>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            <c>true</c> if <paramref name="obj"/> and this instance are of compatible types
            and represent the same value; otherwise, <c>false</c>.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:Colore.Effects.ChromaLink.CustomChromaLinkEffect.Equals(Colore.Effects.ChromaLink.CustomChromaLinkEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter;
            otherwise, <c>false</c>.
            </returns>
            <param name="other">A <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> to compare with this object.</param>
        </member>
        <member name="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect">
            <inheritdoc />
            <summary>
            Static color effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.ChromaLink.StaticChromaLinkEffect.Color">
            <summary>
            Color to use.
            </summary>
        </member>
        <member name="M:Colore.Effects.ChromaLink.StaticChromaLinkEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> struct.
            </summary>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Colore.Effects.ChromaLink.StaticChromaLinkEffect.op_Equality(Colore.Effects.ChromaLink.StaticChromaLinkEffect,Colore.Effects.ChromaLink.StaticChromaLinkEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> for equality with another <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.ChromaLink.StaticChromaLinkEffect.op_Inequality(Colore.Effects.ChromaLink.StaticChromaLinkEffect,Colore.Effects.ChromaLink.StaticChromaLinkEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> for inequality with another <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.ChromaLink.StaticChromaLinkEffect.Equals(Colore.Effects.ChromaLink.StaticChromaLinkEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.ChromaLink.StaticChromaLinkEffect.Equals(System.Object)">
            <inheritdoc />
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>
            <c>true</c> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.ChromaLink.StaticChromaLinkEffect.GetHashCode">
            <inheritdoc />
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Colore.Effects.Generic.EffectType">
            <summary>
            Generic device effects.
            </summary>
            <remarks>Not all devices are compatible with every effect type.</remarks>
        </member>
        <member name="F:Colore.Effects.Generic.EffectType.None">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Generic.EffectType.Static">
            <summary>
            Static color effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Generic.EffectType.Custom">
            <summary>
            Custom effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Generic.EffectType.Reserved">
            <summary>
            Reserved effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Generic.EffectType.Invalid">
            <summary>
            Invalid effect.
            </summary>
        </member>
        <member name="T:Colore.Effects.Generic.NoneEffect">
            <inheritdoc />
            <summary>
            Describes the <c>NO_EFFECT</c> effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Generic.NoneEffect.Size">
            <summary>
            The size of the struct.
            </summary>
        </member>
        <member name="F:Colore.Effects.Generic.NoneEffect.Parameter">
            <summary>
            Additional effect parameter.
            </summary>
        </member>
        <member name="M:Colore.Effects.Generic.NoneEffect.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Generic.NoneEffect" /> struct.
            </summary>
            <param name="parameter">Additional effect parameter to set.</param>
        </member>
        <member name="M:Colore.Effects.Generic.NoneEffect.op_Equality(Colore.Effects.Generic.NoneEffect,Colore.Effects.Generic.NoneEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.Generic.NoneEffect" /> for equality with another <see cref="T:Colore.Effects.Generic.NoneEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Generic.NoneEffect.op_Inequality(Colore.Effects.Generic.NoneEffect,Colore.Effects.Generic.NoneEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.Generic.NoneEffect" /> for inequality with another <see cref="T:Colore.Effects.Generic.NoneEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Generic.NoneEffect.Equals(Colore.Effects.Generic.NoneEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Generic.NoneEffect.Equals(System.Object)">
            <inheritdoc />
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>
            <c>true</c> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Generic.NoneEffect.GetHashCode">
            <inheritdoc />
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Colore.Effects.Headset.CustomHeadsetEffect">
            <inheritdoc />
            <summary>
            Custom effect for headsets.
            </summary>
        </member>
        <member name="F:Colore.Effects.Headset.CustomHeadsetEffect._colors">
            <summary>
            Colors for the LEDs.
            </summary>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> struct with
            a default color to apply to every LED.
            </summary>
            <param name="color">The color to set every LED to initially.</param>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.#ctor(System.Collections.Generic.IList{Colore.Data.Color})">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> struct.
            </summary>
            <param name="colors">The colors to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="colors" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the colors list supplied is of an incorrect size.</exception>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.#ctor(Colore.Effects.Headset.CustomHeadsetEffect)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> struct
            with the colors copied from another struct of the same type.
            </summary>
            <param name="other">The struct to copy data from.</param>
        </member>
        <member name="P:Colore.Effects.Headset.CustomHeadsetEffect.Colors">
            <summary>
            Gets the internal <see cref="T:Colore.Data.Color" /> backing array.
            </summary>
        </member>
        <member name="P:Colore.Effects.Headset.CustomHeadsetEffect.Item(System.Int32)">
            <summary>
            Gets or sets LEDs in the custom array.
            </summary>
            <param name="led">Index of the LED to access.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if the specified LED index is outside the range of available LED indices.
            </exception>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.op_Equality(Colore.Effects.Headset.CustomHeadsetEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> with
            another object for equality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.op_Inequality(Colore.Effects.Headset.CustomHeadsetEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> with
            another object for inequality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.Create">
            <summary>
            Create a new empty <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> struct.
            </summary>
            <returns>An instance of <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> filled with the color black.</returns>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.Clone">
            <summary>
            Returns a copy of this struct.
            </summary>
            <returns>A copy of this struct.</returns>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.Set(Colore.Data.Color)">
            <summary>
            Sets all the LED indices to the specified <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set the LEDs to.</param>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.Clear">
            <summary>
            Clears the colors in this <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> struct (sets to <see cref="F:Colore.Data.Color.Black" />).
            </summary>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> and this instance are the same type
            and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Headset.CustomHeadsetEffect.Equals(Colore.Effects.Headset.CustomHeadsetEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other"/> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Colore.Effects.Headset.HeadsetConstants">
            <summary>
            Contains various headset constants used in Razer's API.
            </summary>
        </member>
        <member name="F:Colore.Effects.Headset.HeadsetConstants.MaxLeds">
            <summary>
            The maximum number of LEDs on a headset.
            </summary>
        </member>
        <member name="T:Colore.Effects.Headset.HeadsetEffectType">
            <summary>
            Standard effects for headsets.
            </summary>
        </member>
        <member name="F:Colore.Effects.Headset.HeadsetEffectType.None">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Headset.HeadsetEffectType.Static">
            <summary>
            Static color.
            </summary>
        </member>
        <member name="F:Colore.Effects.Headset.HeadsetEffectType.Custom">
            <summary>
            Custom headset effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Headset.HeadsetEffectType.Invalid">
            <summary>
            Invalid effect.
            </summary>
        </member>
        <member name="T:Colore.Effects.Headset.StaticHeadsetEffect">
            <inheritdoc />
            <summary>
            Static color effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Headset.StaticHeadsetEffect.Color">
            <summary>
            The <see cref="F:Colore.Effects.Headset.StaticHeadsetEffect.Color" /> of the effect.
            </summary>
        </member>
        <member name="M:Colore.Effects.Headset.StaticHeadsetEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> struct.
            </summary>
            <param name="color">The <see cref="F:Colore.Effects.Headset.StaticHeadsetEffect.Color" /> to set.</param>
        </member>
        <member name="M:Colore.Effects.Headset.StaticHeadsetEffect.op_Equality(Colore.Effects.Headset.StaticHeadsetEffect,Colore.Effects.Headset.StaticHeadsetEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> for equality with another <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Headset.StaticHeadsetEffect.op_Inequality(Colore.Effects.Headset.StaticHeadsetEffect,Colore.Effects.Headset.StaticHeadsetEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> for inequality with another <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Headset.StaticHeadsetEffect.Equals(Colore.Effects.Headset.StaticHeadsetEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Headset.StaticHeadsetEffect.Equals(System.Object)">
            <inheritdoc />
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>
            <c>true</c> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Headset.StaticHeadsetEffect.GetHashCode">
            <inheritdoc />
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Colore.Effects.Keyboard.CustomKeyboardEffect">
            <inheritdoc />
            <summary>
            Describes a custom grid effect for every key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.CustomKeyboardEffect._colors">
            <summary>
            Color definitions for each key on the keyboard.
            </summary>
            <remarks>
            The array is 1-dimensional, but will be passed to code expecting
            a 2-dimensional array. Access to this array is done using indices
            according to: <c>column + row * KeyboardConstants.MaxColumns</c>.
            </remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.CustomKeyboardEffect._keys">
            <summary>
            Color definitions for the key translation mode.
            </summary>
            <remarks>
            Colors set in here will, if flagged with <c>0x01000000</c>,
            automatically be translated to the proper keyboard location
            depending on the users keyboard configuration.
            </remarks>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> struct
            with every position set to a specific color.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set each position to.</param>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.#ctor(Colore.Effects.Keyboard.CustomKeyboardEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> struct
            with the colors copied from another struct of the same type.
            </summary>
            <param name="other">The <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> struct to copy data from.</param>
        </member>
        <member name="P:Colore.Effects.Keyboard.CustomKeyboardEffect.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets cells in the custom grid.
            </summary>
            <param name="row">Row to access, zero indexed.</param>
            <param name="column">Column to access, zero indexed.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="P:Colore.Effects.Keyboard.CustomKeyboardEffect.Item(System.Int32)">
            <summary>
            Gets or sets a position in the custom grid.
            </summary>
            <param name="index">The index to access, zero indexed.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="P:Colore.Effects.Keyboard.CustomKeyboardEffect.Item(Colore.Effects.Keyboard.Key)">
            <summary>
            Gets or sets the color for a specific key in the custom grid.
            The SDK will handle translation of location data to access the
            correct key depending on user configuration.
            </summary>
            <param name="key">The <see cref="T:Colore.Effects.Keyboard.Key" /> to access.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> for the specified key.</returns>
            <remarks>
            Please note that the position of a key accessed in this way is not
            guaranteed to be correct, as different layouts on different keyboards
            can place these keys in other locations.
            </remarks>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.op_Equality(Colore.Effects.Keyboard.CustomKeyboardEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> with
            another object for equality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.op_Inequality(Colore.Effects.Keyboard.CustomKeyboardEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> with
            another object for inequality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.Create">
            <summary>
            Creates a new empty <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> struct.
            </summary>
            <returns>An instance of <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" />
            filled with the color black.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.Clone">
            <summary>
            Returns a copy of this struct.
            </summary>
            <returns>A copy of this struct.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.Clear">
            <summary>
            Clears the colors from the grid, setting them to <see cref="F:Colore.Data.Color.Black" />.
            </summary>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            <c>true</c> if <paramref name="obj"/> and this instance are of compatible types
            and represent the same value; otherwise, <c>false</c>.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.Equals(Colore.Effects.Keyboard.CustomKeyboardEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter;
            otherwise, <c>false</c>.
            </returns>
            <param name="other">A <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> to compare with this object.</param>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.Set(Colore.Data.Color)">
            <summary>
            Sets the entire grid to a specific <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to apply.</param>
        </member>
        <member name="M:Colore.Effects.Keyboard.CustomKeyboardEffect.ToMultiArrays">
            <summary>
            Retrieves the internal backing arrays as multi-dimensional <see cref="T:Colore.Data.Color" /> arrays.
            </summary>
            <returns>A <see cref="T:System.ValueTuple`2" /> containing the two arrays.</returns>
        </member>
        <member name="T:Colore.Effects.Keyboard.DeathstalkerGridEffect">
            <inheritdoc />
            <summary>
            Describes a custom grid effect for every key.
            </summary>
            <remarks>
            This effect is only used for compatibility with the Razer Deathstalker Chroma keyboard.
            </remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.DeathstalkerGridEffect.Zones">
            <summary>
            Contains positions for each zone key.
            </summary>
            <remarks>
            <para>When a "zone key" is set, the entire zone for that key will light
            up in that color.</para>
            <para>
            Shoutout to antonpup at GitHub for posting the Deathstalker keymap
            which has since been removed from Razer's documentation.
            https://github.com/antonpup/Aurora/issues/286#issuecomment-269695154.
            </para>
            </remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.DeathstalkerGridEffect._colors">
            <summary>
            Color definitions for each key on the keyboard.
            </summary>
            <remarks>
            The array is 1-dimensional, but will be passed to code expecting
            a 2-dimensional array. Access to this array is done using indices
            according to: <c>column + row * KeyboardConstants.MaxColumns</c>.
            </remarks>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" /> struct
            with every position set to a specific color.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set each position to.</param>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.#ctor(Colore.Effects.Keyboard.DeathstalkerGridEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" /> struct
            with the colors copied from another struct of the same type.
            </summary>
            <param name="other">The <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> struct to copy data from.</param>
        </member>
        <member name="P:Colore.Effects.Keyboard.DeathstalkerGridEffect.Item(System.Int32)">
            <summary>
            Gets or sets a position in the custom grid.
            </summary>
            <param name="index">The index to access, zero indexed.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.op_Equality(Colore.Effects.Keyboard.DeathstalkerGridEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" /> with
            another object for equality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.op_Inequality(Colore.Effects.Keyboard.DeathstalkerGridEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" /> with
            another object for inequality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.Create">
            <summary>
            Creates a new empty <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" /> struct.
            </summary>
            <returns>An instance of <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" />
            filled with the color black.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.Clone">
            <summary>
            Returns a copy of this struct.
            </summary>
            <returns>A copy of this struct.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.Clear">
            <summary>
            Clears the colors from the grid, setting them to <see cref="F:Colore.Data.Color.Black" />.
            </summary>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            <c>true</c> if <paramref name="obj"/> and this instance are of compatible types
            and represent the same value; otherwise, <c>false</c>.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.Equals(Colore.Effects.Keyboard.DeathstalkerGridEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter;
            otherwise, <c>false</c>.
            </returns>
            <param name="other">A <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> to compare with this object.</param>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.Set(Colore.Data.Color)">
            <summary>
            Sets the entire grid to a specific <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to apply.</param>
        </member>
        <member name="M:Colore.Effects.Keyboard.DeathstalkerGridEffect.ToMultiArray">
            <summary>
            Retrieves the internal backing arrays as multi-dimensional <see cref="T:Colore.Data.Color" /> arrays.
            </summary>
            <returns>A two-dimensional array of <see cref="T:Colore.Data.Color" /> values.</returns>
        </member>
        <member name="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect">
            <inheritdoc />
            <summary>
            Describes a custom grid effect for extended keyboards.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect._colors">
            <summary>
            Color definitions for each key on the keyboard.
            </summary>
            <remarks>
            The array is 1-dimensional, but will be passed to code expecting
            a 2-dimensional array. Access to this array is done using indices
            according to: <c>column + row * KeyboardConstants.MaxExtendedColumns</c>.
            </remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect._keys">
            <summary>
            Color definitions for the key translation mode.
            </summary>
            <remarks>Colors set in here will, if flagged with <c>0x01000000</c>,
            automatically be translated to the proper keyboard location
            depending on the user's keyboard configuration.</remarks>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" /> struct
            with every position set to a specific color.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set each position to.</param>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.#ctor(Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" /> struct
            with the colors copied from another struct of the same type.
            </summary>
            <param name="other">The <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" /> struct to copy data from.</param>
        </member>
        <member name="P:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets cells in the custom grid.
            </summary>
            <param name="row">Row to access, zero indexed.</param>
            <param name="column">Column to access, zero indexed.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="row" /> and/or <paramref name="column" /> are out of range.
            </exception>
        </member>
        <member name="P:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.Item(System.Int32)">
            <summary>
            Gets or sets a position in the custom grid.
            </summary>
            <param name="index">The index to access, zero indexed.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Thrown if <paramref name="index" /> is out of range.
            </exception>
        </member>
        <member name="P:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.Item(Colore.Effects.Keyboard.Key)">
            <summary>
            Gets or sets the color for a specific key in the custom grid.
            The SDK will handle translation of location data to access the
            correct key depending on user configuration.
            </summary>
            <param name="key">The <see cref="T:Colore.Effects.Keyboard.Key" /> to access.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> for the specified key.</returns>
            <remarks>
            Please note that the position of a key accessed in this way is not
            guaranteed to be correct, as different layouts on different keyboards
            can place these keys in other locations.
            </remarks>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.op_Equality(Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" /> with
            another object for equality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.op_Inequality(Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" /> with
            another object for inequality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.Create">
            <summary>
            Creates a new empty <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" /> struct.
            </summary>
            <returns>An instance of <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" />
            filled with the color black.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.Clone">
            <summary>
            Returns a copy of this struct.
            </summary>
            <returns>A copy of this struct.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.Clear">
            <summary>
            Clears the colors from the grid, setting them to <see cref="F:Colore.Data.Color.Black" />.
            </summary>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            <c>true</c> if <paramref name="obj"/> and this instance are of compatible types
            and represent the same value; otherwise, <c>false</c>.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.Equals(Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter;
            otherwise, <c>false</c>.
            </returns>
            <param name="other">A <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" /> to compare with this object.</param>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.Set(Colore.Data.Color)">
            <summary>
            Sets the entire grid to a specific <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to apply.</param>
        </member>
        <member name="M:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect.ToMultiArrays">
            <summary>
            Retrieves the internal backing arrays as multi-dimensional <see cref="T:Colore.Data.Color" /> arrays.
            </summary>
            <returns>A <see cref="T:System.ValueTuple`2" /> containing the two arrays.</returns>
        </member>
        <member name="T:Colore.Effects.Keyboard.Key">
            <summary>
            Definition of all keys available on the keyboard.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Logo">
            <summary>
            The Razer logo on the keyboard.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Escape">
            <summary>
            Esc key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F1">
            <summary>
            F1 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F2">
            <summary>
            F2 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F3">
            <summary>
            F3 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F4">
            <summary>
            F4 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F5">
            <summary>
            F5 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F6">
            <summary>
            F6 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F7">
            <summary>
            F7 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F8">
            <summary>
            F8 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F9">
            <summary>
            F9 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F10">
            <summary>
            F10 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F11">
            <summary>
            F11 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F12">
            <summary>
            F12 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.D1">
            <summary>
            1 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.D2">
            <summary>
            2 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.D3">
            <summary>
            3 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.D4">
            <summary>
            4 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.D5">
            <summary>
            5 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.D6">
            <summary>
            6 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.D7">
            <summary>
            7 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.D8">
            <summary>
            8 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.D9">
            <summary>
            9 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.D0">
            <summary>
            0 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.A">
            <summary>
            A key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.B">
            <summary>
            B key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.C">
            <summary>
            C key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.D">
            <summary>
            D key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.E">
            <summary>
            E key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.F">
            <summary>
            F key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.G">
            <summary>
            G key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.H">
            <summary>
            H key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.I">
            <summary>
            I key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.J">
            <summary>
            J key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.K">
            <summary>
            K key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.L">
            <summary>
            L key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.M">
            <summary>
            M key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.N">
            <summary>
            N key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.O">
            <summary>
            O key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.P">
            <summary>
            P key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Q">
            <summary>
            Q key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.R">
            <summary>
            R key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.S">
            <summary>
            S key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.T">
            <summary>
            T key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.U">
            <summary>
            U key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.V">
            <summary>
            V key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.W">
            <summary>
            W key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.X">
            <summary>
            X key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Y">
            <summary>
            Y key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Z">
            <summary>
            Z key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.NumLock">
            <summary>
            Numlock key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Num0">
            <summary>
            Numpad 0.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Num1">
            <summary>
            Numpad 1.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Num2">
            <summary>
            Numpad 2.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Num3">
            <summary>
            Numpad 3.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Num4">
            <summary>
            Numpad 4.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Num5">
            <summary>
            Numpad 5.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Num6">
            <summary>
            Numpad 6.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Num7">
            <summary>
            Numpad 7.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Num8">
            <summary>
            Numpad 8.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Num9">
            <summary>
            Numpad 9.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.NumDivide">
            <summary>
            Divide key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.NumMultiply">
            <summary>
            Multiply key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.NumSubtract">
            <summary>
            Subtract key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.NumAdd">
            <summary>
            Add key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.NumEnter">
            <summary>
            Enter key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.NumDecimal">
            <summary>
            Decimal key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.PrintScreen">
            <summary>
            Print Screen.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Scroll">
            <summary>
            Scroll Lock.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Pause">
            <summary>
            Pause key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Insert">
            <summary>
            Insert key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Home">
            <summary>
            Home key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.PageUp">
            <summary>
            Page Up.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Delete">
            <summary>
            Delete key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.End">
            <summary>
            End key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.PageDown">
            <summary>
            Page Down key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Up">
            <summary>
            Up key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Left">
            <summary>
            Left key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Down">
            <summary>
            Down key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Right">
            <summary>
            Right key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Tab">
            <summary>
            Tab key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.CapsLock">
            <summary>
            Caps Lock.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Backspace">
            <summary>
            Backspace key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Enter">
            <summary>
            Enter key.
            </summary>
            <remarks>Unsafe key.</remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.LeftControl">
            <summary>
            Left control key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.LeftWindows">
            <summary>
            Left windows key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.LeftAlt">
            <summary>
            Left alt key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Space">
            <summary>
            Spacebar key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.RightAlt">
            <summary>
            Right alt key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Function">
            <summary>
            "Fn" function key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.RightMenu">
            <summary>
            Right menu key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.RightControl">
            <summary>
            Right control key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.LeftShift">
            <summary>
            Left shift key.
            </summary>
            <remarks>Unsafe key.</remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.RightShift">
            <summary>
            Right shift key.
            </summary>
            <remarks>Unsafe key.</remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Macro1">
            <summary>
            Macro key 1.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Macro2">
            <summary>
            Macro key 2.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Macro3">
            <summary>
            Macro key 3.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Macro4">
            <summary>
            Macro key 4.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Macro5">
            <summary>
            Macro Key 5.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.OemTilde">
            <summary>
            Tilde (~) key. 半角/全角.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.OemMinus">
            <summary>
            Minus (-) key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.OemEquals">
            <summary>
            Equal sign (=) key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.OemLeftBracket">
            <summary>
            Left square bracket ([) key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.OemRightBracket">
            <summary>
            Right square bracket (]) key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.OemBackslash">
            <summary>
            Backslash (\) key.
            </summary>
            <remarks>Unsafe key.</remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.OemSemicolon">
            <summary>
            Semi-colon (;) key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.OemApostrophe">
            <summary>
            Apostrophe (') key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.OemComma">
            <summary>
            Comma (,) key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.OemPeriod">
            <summary>
            Period/full stop (.) key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.OemSlash">
            <summary>
            Forwards slash (/) key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.EurPound">
            <summary>
            Pound sign (#) key.
            </summary>
            <remarks>Unsafe key.</remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.EurBackslash">
            <summary>
            Backslash (\) key.
            </summary>
            <remarks>Unsafe key.</remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.JpnYen">
            <summary>
            Yen (¥) key.
            </summary>
            <remarks>Unsafe key.</remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.JpnSlash">
            <summary>
            Forward slash (/) key.
            </summary>
            <remarks>Unsafe key.</remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Jpn3">
            <summary>
            無変換 key.
            </summary>
            <remarks>Unsafe key.</remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Jpn4">
            <summary>
            変換 key.
            </summary>
            <remarks>Unsafe key.</remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Jpn5">
            <summary>
            ひらがな/カタカナ key.
            </summary>
            <remarks>Unsafe key.</remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.KorPipe">
            <summary>
            Pipe character (|) key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Kor2">
            <summary>
            Unknown Korean key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Kor3">
            <summary>
            Unknown Korean key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Kor4">
            <summary>
            Unknown Korean key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Kor5">
            <summary>
            한자 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Kor6">
            <summary>
            한/영 key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Kor7">
            <summary>
            Unknown Korean key.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.Key.Invalid">
            <summary>
            Invalid key.
            </summary>
        </member>
        <member name="T:Colore.Effects.Keyboard.KeyboardConstants">
            <summary>
            Holds various keyboard constants used in Razer's API.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardConstants.MaxRows">
            <summary>
            The maximum number of rows on the keyboard.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardConstants.MaxColumns">
            <summary>
            The maximum number of columns on the keyboard.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardConstants.MaxKeys">
            <summary>
            The maximum number of keys on the keyboard.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardConstants.MaxCustomEffects">
            <summary>
            The maximum number of custom effects based on the maximum keys.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardConstants.MaxDeathstalkerZones">
            <summary>
            The maximum number of Deathstalker color zones.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardConstants.MaxExtendedRows">
            <summary>
            The maximum number of rows on an extended keyboard.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardConstants.MaxExtendedColumns">
            <summary>
            The maximum number of columns on an extended keyboard.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardConstants.MaxExtendedKeys">
            <summary>
            The maximum number of keys on an extended keyboard.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardConstants.KeyFlag">
            <summary>
            The bit that needs to be set for key mode to be active on a color.
            </summary>
        </member>
        <member name="T:Colore.Effects.Keyboard.KeyboardEffectType">
            <summary>
            Supported built-in keyboard effects.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardEffectType.None">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardEffectType.Custom">
            <summary>
            Custom effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardEffectType.Static">
            <summary>
            Static effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardEffectType.Reserved">
            <summary>
            Reserved effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardEffectType.CustomKey">
            <summary>
            Custom effect with keys.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardEffectType.ExtendedCustom">
            <summary>
            Custom effect for extended keyboards.
            </summary>
            <remarks>
            The extended APIs are within the "v2" namespace in the Keyboard namespace in the SDK.
            </remarks>
        </member>
        <member name="F:Colore.Effects.Keyboard.KeyboardEffectType.Invalid">
            <summary>
            Invalid effect.
            </summary>
        </member>
        <member name="T:Colore.Effects.Keyboard.PositionData">
            <summary>
            Contains methods to determine if a grid positions is safe.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.PositionData.UnsafePositions">
            <summary>
            Set of positions that are unsafe to use.
            </summary>
        </member>
        <member name="T:Colore.Effects.Keyboard.StaticKeyboardEffect">
            <inheritdoc />
            <summary>
            Describes the static effect type.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keyboard.StaticKeyboardEffect.Color">
            <summary>
            Color of the effect.
            </summary>
        </member>
        <member name="M:Colore.Effects.Keyboard.StaticKeyboardEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keyboard.StaticKeyboardEffect" /> struct.
            </summary>
            <param name="color">Color to apply.</param>
        </member>
        <member name="M:Colore.Effects.Keyboard.StaticKeyboardEffect.op_Equality(Colore.Effects.Keyboard.StaticKeyboardEffect,Colore.Effects.Keyboard.StaticKeyboardEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.Keyboard.StaticKeyboardEffect" /> for equality with another <see cref="T:Colore.Effects.Keyboard.StaticKeyboardEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.StaticKeyboardEffect.op_Inequality(Colore.Effects.Keyboard.StaticKeyboardEffect,Colore.Effects.Keyboard.StaticKeyboardEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.Keyboard.StaticKeyboardEffect" /> for inequality with another <see cref="T:Colore.Effects.Keyboard.StaticKeyboardEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.StaticKeyboardEffect.Equals(Colore.Effects.Keyboard.StaticKeyboardEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.StaticKeyboardEffect.Equals(System.Object)">
            <inheritdoc />
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>
            <c>true</c> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Keyboard.StaticKeyboardEffect.GetHashCode">
            <inheritdoc />
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Colore.Effects.Keypad.CustomKeypadEffect">
            <inheritdoc />
            <summary>
            Custom effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keypad.CustomKeypadEffect._colors">
            <summary>
            Color definitions for each key on the keypad.
            </summary>
            <remarks>
            The array is 1-dimensional, but will be passed to code expecting
            a 2-dimensional array. Access to this array is done using indices
            according to: <c>column + row * KeypadConstants.MaxColumns</c>.
            </remarks>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.#ctor(Colore.Data.Color[][])">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> struct.
            </summary>
            <param name="colors">The colors to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="colors" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the colors array supplied is of an incorrect size.</exception>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.#ctor(System.Collections.Generic.IList{Colore.Data.Color})">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> struct.
            </summary>
            <param name="colors">The colors to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="colors" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the colors array supplied is of an invalid size.</exception>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> struct
            with every position set to a specific color.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set each position to.</param>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.#ctor(Colore.Effects.Keypad.CustomKeypadEffect)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> struct
            with color values copied from another struct of the same type.
            </summary>
            <param name="other">The struct to copy data from.</param>
        </member>
        <member name="P:Colore.Effects.Keypad.CustomKeypadEffect.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets cells in the custom grid.
            </summary>
            <param name="row">Row to access, zero indexed.</param>
            <param name="column">Column to access, zero indexed.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="P:Colore.Effects.Keypad.CustomKeypadEffect.Item(System.Int32)">
            <summary>
            Gets or sets a position in the custom grid.
            </summary>
            <param name="index">The index to access, zero indexed.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.op_Equality(Colore.Effects.Keypad.CustomKeypadEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> with
            another object for equality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.op_Inequality(Colore.Effects.Keypad.CustomKeypadEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> with
            another object for inequality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.Create">
            <summary>
            Creates a new empty <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> struct.
            </summary>
            <returns>An instance of <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" />
            filled with the color black.</returns>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.Clone">
            <summary>
            Returns a copy of this struct.
            </summary>
            <returns>A copy of this struct.</returns>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.Set(Colore.Data.Color)">
            <summary>
            Sets all LED indices to the specified <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set.</param>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.Clear">
            <summary>
            Clears the colors from the grid, setting them to <see cref="F:Colore.Data.Color.Black" />.
            </summary>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            <c>true</c> if <paramref name="obj"/> and this instance are of compatible types
            and represent the same value; otherwise, <c>false</c>.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.Equals(Colore.Effects.Keypad.CustomKeypadEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter;
            otherwise, <c>false</c>.
            </returns>
            <param name="other">A <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> to compare with this object.</param>
        </member>
        <member name="M:Colore.Effects.Keypad.CustomKeypadEffect.ToMultiArray">
            <summary>
            Retrieves the internal backing array as a multi-dimensional <see cref="T:Colore.Data.Color" /> array.
            </summary>
            <returns>
            An instance of <c><see cref="T:Colore.Data.Color" />[<see cref="F:Colore.Effects.Keypad.KeypadConstants.MaxRows" />, <see cref="F:Colore.Effects.Keypad.KeypadConstants.MaxColumns" />]</c>.
            </returns>
        </member>
        <member name="T:Colore.Effects.Keypad.KeypadConstants">
            <summary>
            Keypad constants.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keypad.KeypadConstants.MaxRows">
            <summary>
            Maximum number of rows.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keypad.KeypadConstants.MaxColumns">
            <summary>
            Maximum number of columns.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keypad.KeypadConstants.MaxKeys">
            <summary>
            Total number of keys.
            </summary>
        </member>
        <member name="T:Colore.Effects.Keypad.KeypadEffectType">
            <summary>
            Supported effects for Chroma keypads.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keypad.KeypadEffectType.None">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keypad.KeypadEffectType.Custom">
            <summary>
            Custom effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keypad.KeypadEffectType.Static">
            <summary>
            Static color.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keypad.KeypadEffectType.Invalid">
            <summary>
            Invalid effect.
            </summary>
        </member>
        <member name="T:Colore.Effects.Keypad.StaticKeypadEffect">
            <inheritdoc />
            <summary>
            Static color effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Keypad.StaticKeypadEffect.Color">
            <summary>
            Color to use.
            </summary>
        </member>
        <member name="M:Colore.Effects.Keypad.StaticKeypadEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> struct.
            </summary>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Colore.Effects.Keypad.StaticKeypadEffect.op_Equality(Colore.Effects.Keypad.StaticKeypadEffect,Colore.Effects.Keypad.StaticKeypadEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> for equality with another <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keypad.StaticKeypadEffect.op_Inequality(Colore.Effects.Keypad.StaticKeypadEffect,Colore.Effects.Keypad.StaticKeypadEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> for inequality with another <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Keypad.StaticKeypadEffect.Equals(Colore.Effects.Keypad.StaticKeypadEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Keypad.StaticKeypadEffect.Equals(System.Object)">
            <inheritdoc />
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>
            <c>true</c> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Keypad.StaticKeypadEffect.GetHashCode">
            <inheritdoc />
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Colore.Effects.Mousepad.CustomMousepadEffect">
            <inheritdoc />
            <summary>
            Custom effect for mouse pad.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mousepad.CustomMousepadEffect._colors">
            <summary>
            Colors for the LEDs.
            </summary>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> struct with
            a default color to apply to every LED.
            </summary>
            <param name="color">The color to set every LED to initially.</param>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.#ctor(System.Collections.Generic.IList{Colore.Data.Color})">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> struct.
            </summary>
            <param name="colors">The colors to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="colors" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the colors list supplied is of an incorrect size.</exception>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.#ctor(Colore.Effects.Mousepad.CustomMousepadEffect)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> struct
            with the colors copied from another struct of the same type.
            </summary>
            <param name="other">The struct to copy data from.</param>
        </member>
        <member name="P:Colore.Effects.Mousepad.CustomMousepadEffect.Colors">
            <summary>
            Gets the internal <see cref="T:Colore.Data.Color" /> backing array.
            </summary>
        </member>
        <member name="P:Colore.Effects.Mousepad.CustomMousepadEffect.Item(System.Int32)">
            <summary>
            Gets or sets LEDs in the custom array.
            </summary>
            <param name="led">Index of the LED to access.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.op_Equality(Colore.Effects.Mousepad.CustomMousepadEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> with
            another object for equality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.op_Inequality(Colore.Effects.Mousepad.CustomMousepadEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> with
            another object for inequality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.Create">
            <summary>
            Create a new empty <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> struct.
            </summary>
            <returns>An instance of <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> filled with the color black.</returns>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.Clone">
            <summary>
            Returns a copy of this struct.
            </summary>
            <returns>A copy of this struct.</returns>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.Set(Colore.Data.Color)">
            <summary>
            Sets all the LED indices to the specified <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set the LEDs to.</param>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.Clear">
            <summary>
            Clears the colors in this <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> struct (sets to <see cref="F:Colore.Data.Color.Black" />).
            </summary>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">Another object to compare to.</param>
            <returns>
            <c>true</c> if <paramref name="obj"/> and this instance are the same type
            and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Mousepad.CustomMousepadEffect.Equals(Colore.Effects.Mousepad.CustomMousepadEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="T:Colore.Effects.Mousepad.MousepadConstants">
            <summary>
            Mouse pad constants.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mousepad.MousepadConstants.MaxLeds">
            <summary>
            Maximum number of LEDs.
            </summary>
        </member>
        <member name="T:Colore.Effects.Mousepad.MousepadEffectType">
            <summary>
            Effects supported by Chroma mouse pads.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mousepad.MousepadEffectType.None">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mousepad.MousepadEffectType.Custom">
            <summary>
            A custom effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mousepad.MousepadEffectType.Static">
            <summary>
            Static color.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mousepad.MousepadEffectType.Invalid">
            <summary>
            Invalid effect type.
            </summary>
        </member>
        <member name="T:Colore.Effects.Mousepad.StaticMousepadEffect">
            <inheritdoc />
            <summary>
            Static effect for mouse pad.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mousepad.StaticMousepadEffect.Color">
            <summary>
            The color to use.
            </summary>
        </member>
        <member name="M:Colore.Effects.Mousepad.StaticMousepadEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Mousepad.StaticMousepadEffect" /> struct.
            </summary>
            <param name="color">The color to use.</param>
        </member>
        <member name="M:Colore.Effects.Mousepad.StaticMousepadEffect.op_Equality(Colore.Effects.Mousepad.StaticMousepadEffect,Colore.Effects.Mousepad.StaticMousepadEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.Mousepad.StaticMousepadEffect" /> for equality with another <see cref="T:Colore.Effects.Mousepad.StaticMousepadEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Mousepad.StaticMousepadEffect.op_Inequality(Colore.Effects.Mousepad.StaticMousepadEffect,Colore.Effects.Mousepad.StaticMousepadEffect)">
            <summary>
            Checks an instance of <see cref="T:Colore.Effects.Mousepad.StaticMousepadEffect" /> for inequality with another <see cref="T:Colore.Effects.Mousepad.StaticMousepadEffect" /> instance.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Mousepad.StaticMousepadEffect.Equals(Colore.Effects.Mousepad.StaticMousepadEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Mousepad.StaticMousepadEffect.Equals(System.Object)">
            <inheritdoc />
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="obj">The object to compare with the current instance. </param>
            <returns>
            <c>true</c> if <paramref name="obj" /> and this instance are the same type and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Mousepad.StaticMousepadEffect.GetHashCode">
            <inheritdoc />
            <summary>Returns the hash code for this instance.</summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Colore.Effects.Mouse.CustomMouseEffect">
            <inheritdoc />
            <summary>
            Custom grid effect for mouse LEDs.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.CustomMouseEffect._colors">
            <summary>
            Color definitions for each led on the mouse.
            </summary>
            <remarks>
            The array is 1-dimensional, but will be passed to code expecting
            a 2-dimensional array. Access to this array is done using indices
            according to: <c>column + row * MouseConstants.MaxColumns</c>.
            </remarks>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.#ctor(Colore.Data.Color[][])">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> struct.
            </summary>
            <param name="colors">The colors to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="colors" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the colors array supplied is of an incorrect size.</exception>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.#ctor(System.Collections.Generic.IList{Colore.Data.Color})">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> struct.
            </summary>
            <param name="colors">The colors to use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="colors" /> is <c>null</c>.</exception>
            <exception cref="T:System.ArgumentException">Thrown if the colors array supplied is of an invalid size.</exception>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.#ctor(Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> struct
            with every position set to a specific color.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set each position to.</param>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.#ctor(Colore.Effects.Mouse.CustomMouseEffect)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> struct
            with the colors copied from another struct of the same type.
            </summary>
            <param name="other">The <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> struct to copy data from.</param>
        </member>
        <member name="P:Colore.Effects.Mouse.CustomMouseEffect.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets cells in the <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" />.
            </summary>
            <param name="row">Row to access, zero indexed.</param>
            <param name="column">Column to access, zero indexed.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="P:Colore.Effects.Mouse.CustomMouseEffect.Item(System.Int32)">
            <summary>
            Gets or sets a position in the custom grid.
            </summary>
            <param name="index">The index to access, zero indexed.</param>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown if the requested index is out of range.</exception>
        </member>
        <member name="P:Colore.Effects.Mouse.CustomMouseEffect.Item(Colore.Effects.Mouse.GridLed)">
            <summary>
            Gets or sets the color for a specific LED in the <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" />.
            </summary>
            <param name="led">The <see cref="T:Colore.Effects.Mouse.GridLed" /> to access.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> for the specified led.</returns>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.op_Equality(Colore.Effects.Mouse.CustomMouseEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> with
            another object for equality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.op_Inequality(Colore.Effects.Mouse.CustomMouseEffect,System.Object)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> with
            another object for inequality.
            </summary>
            <param name="left">The left operand, an instance of <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" />.</param>
            <param name="right">The right operand, any type of object.</param>
            <returns><c>true</c> if the two objects are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.Create">
            <summary>
            Creates a new empty <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> struct.
            </summary>
            <returns>An instance of <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" />
            filled with the color black.</returns>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.Clone">
            <summary>
            Returns a copy of this struct.
            </summary>
            <returns>A copy of this struct.</returns>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.GetHashCode">
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>
            A 32-bit signed integer that is the hash code for this instance.
            </returns>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.Clear">
            <summary>
            Clears the colors from the grid, setting them to <see cref="F:Colore.Data.Color.Black" />.
            </summary>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.Equals(System.Object)">
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <returns>
            <c>true</c> if <paramref name="obj"/> and this instance are of compatible types
            and represent the same value; otherwise, <c>false</c>.
            </returns>
            <param name="obj">Another object to compare to. </param>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.Equals(Colore.Effects.Mouse.CustomMouseEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">A <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter;
            otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.Set(Colore.Data.Color)">
            <summary>
            Sets the entire grid to a specific <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to apply.</param>
        </member>
        <member name="M:Colore.Effects.Mouse.CustomMouseEffect.ToMultiArray">
            <summary>
            Retrieves the internal backing array as a multi-dimensional <see cref="T:Colore.Data.Color" /> array.
            </summary>
            <returns>An instance of <c><see cref="T:Colore.Data.Color" />[<see cref="F:Colore.Effects.Mouse.MouseConstants.MaxRows" />, <see cref="F:Colore.Effects.Mouse.MouseConstants.MaxColumns" />]</c>.</returns>
        </member>
        <member name="T:Colore.Effects.Mouse.GridLed">
            <summary>
            LED definitions for the virtual grid.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.ScrollWheel">
            <summary>
            The LED illuminating the scroll wheel.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.Logo">
            <summary>
            The LED illuminating the logo present on the mouse.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.Backlight">
            <summary>
            The mouse backlight.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.LeftSide1">
            <summary>
            First LED on left side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.LeftSide2">
            <summary>
            Second LED on left side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.LeftSide3">
            <summary>
            Third LED on left side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.LeftSide4">
            <summary>
            Fourth LED on left side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.LeftSide5">
            <summary>
            Fifth LED on left side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.LeftSide6">
            <summary>
            Sixth LED on left side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.LeftSide7">
            <summary>
            Seventh LED on left side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.Bottom1">
            <summary>
            First bottom LED.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.Bottom2">
            <summary>
            Second bottom LED.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.Bottom3">
            <summary>
            Third bottom LED.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.Bottom4">
            <summary>
            Fourth bottom LED.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.Bottom5">
            <summary>
            Fifth bottom LED.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.RightSide1">
            <summary>
            First LED on right side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.RightSide2">
            <summary>
            Second LED on right side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.RightSide3">
            <summary>
            Third LED on right side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.RightSide4">
            <summary>
            Fourth LED on right side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.RightSide5">
            <summary>
            Fifth LED on right side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.RightSide6">
            <summary>
            Sixth LED on right side.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.GridLed.RightSide7">
            <summary>
            Seventh LED on right side.
            </summary>
        </member>
        <member name="T:Colore.Effects.Mouse.Led">
            <summary>
            LEDs that can be the target of color changes.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.None">
            <summary>
            No LED.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.ScrollWheel">
            <summary>
            The LED illuminating the scroll wheel.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Logo">
            <summary>
            The LED illuminating the logo present on the mouse.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Backlight">
            <summary>
            The mouse backlight.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip1">
            <summary>
            Side strip LED 1 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip2">
            <summary>
            Side strip LED 2 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip3">
            <summary>
            Side strip LED 3 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip4">
            <summary>
            Side strip LED 4 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip5">
            <summary>
            Side strip LED 5 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip6">
            <summary>
            Side strip LED 6 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip7">
            <summary>
            Side strip LED 7 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip8">
            <summary>
            Side strip LED 8 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip9">
            <summary>
            Side strip LED 9 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip10">
            <summary>
            Side strip LED 10 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip11">
            <summary>
            Side strip LED 11 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip12">
            <summary>
            Side strip LED 12 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip13">
            <summary>
            Side strip LED 13 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.Strip14">
            <summary>
            Side strip LED 14 (Mamba TE).
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.Led.All">
            <summary>
            All LEDs.
            </summary>
        </member>
        <member name="T:Colore.Effects.Mouse.MouseConstants">
            <summary>
            Mouse constants.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.MouseConstants.MaxRows">
            <summary>
            Maximum number of LED rows.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.MouseConstants.MaxColumns">
            <summary>
            Maximum number of LED columns.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.MouseConstants.MaxLeds">
            <summary>
            Maximum number of LEDs on the grid layout.
            </summary>
        </member>
        <member name="T:Colore.Effects.Mouse.MouseEffectType">
            <summary>
            Supported built-in mouse effects.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.MouseEffectType.None">
            <summary>
            No effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.MouseEffectType.Static">
            <summary>
            Static color effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.MouseEffectType.Custom">
            <summary>
            Custom grid effect.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.MouseEffectType.Invalid">
            <summary>
            Invalid effect.
            </summary>
        </member>
        <member name="T:Colore.Effects.Mouse.StaticMouseEffect">
            <inheritdoc />
            <summary>
            Describes the static effect type.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.StaticMouseEffect.Led">
            <summary>
            The LED on which to apply the color.
            </summary>
        </member>
        <member name="F:Colore.Effects.Mouse.StaticMouseEffect.Color">
            <summary>
            The color to apply.
            </summary>
        </member>
        <member name="M:Colore.Effects.Mouse.StaticMouseEffect.#ctor(Colore.Data.Color)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> struct,
            with a color to set for every LED.
            </summary>
            <param name="color">The colo to set for every LED.</param>
        </member>
        <member name="M:Colore.Effects.Mouse.StaticMouseEffect.#ctor(Colore.Effects.Mouse.Led,Colore.Data.Color)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> struct.
            </summary>
            <param name="led">The <see cref="F:Colore.Effects.Mouse.StaticMouseEffect.Led" /> on which to apply the color.</param>
            <param name="color">The <see cref="F:Colore.Effects.Mouse.StaticMouseEffect.Color" /> to set.</param>
        </member>
        <member name="M:Colore.Effects.Mouse.StaticMouseEffect.op_Equality(Colore.Effects.Mouse.StaticMouseEffect,Colore.Effects.Mouse.StaticMouseEffect)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> for equality with another <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> struct.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Mouse.StaticMouseEffect.op_Inequality(Colore.Effects.Mouse.StaticMouseEffect,Colore.Effects.Mouse.StaticMouseEffect)">
            <summary>
            Compares an instance of <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> for inequality with another <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> struct.
            </summary>
            <param name="left">Left operand.</param>
            <param name="right">Right operand.</param>
            <returns><c>true</c> if the two instances are not equal, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Effects.Mouse.StaticMouseEffect.Equals(Colore.Effects.Mouse.StaticMouseEffect)">
            <inheritdoc />
            <summary>
            Indicates whether the current object is equal to another object of the same type.
            </summary>
            <param name="other">An object to compare with this object.</param>
            <returns>
            <c>true</c> if the current object is equal to the <paramref name="other" /> parameter; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Mouse.StaticMouseEffect.Equals(System.Object)">
            <inheritdoc />
            <summary>
            Indicates whether this instance and a specified object are equal.
            </summary>
            <param name="other">The object to compare with the current instance. </param>
            <returns>
            <c>true</c> if <paramref name="other" /> and this instance are the same type and represent the same value; otherwise, <c>false</c>.
            </returns>
        </member>
        <member name="M:Colore.Effects.Mouse.StaticMouseEffect.GetHashCode">
            <inheritdoc />
            <summary>
            Returns the hash code for this instance.
            </summary>
            <returns>A 32-bit signed integer that is the hash code for this instance.</returns>
        </member>
        <member name="T:Colore.Events.ApplicationStateEventArgs">
            <inheritdoc />
            <summary>
            Event arguments for the application state event.
            </summary>
        </member>
        <member name="M:Colore.Events.ApplicationStateEventArgs.#ctor(System.Boolean)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Events.ApplicationStateEventArgs" /> class.
            </summary>
            <param name="enabled">Value indicating whether the application has been enabled.</param>
        </member>
        <member name="P:Colore.Events.ApplicationStateEventArgs.Enabled">
            <summary>
            Gets a value indicating whether or not the application has been enabled.
            </summary>
        </member>
        <member name="T:Colore.Events.DeviceAccessEventArgs">
            <inheritdoc />
            <summary>
            Event arguments for the device access event.
            </summary>
        </member>
        <member name="M:Colore.Events.DeviceAccessEventArgs.#ctor(System.Boolean)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Events.DeviceAccessEventArgs" /> class.
            </summary>
            <param name="granted">Value indicating whether device access was granted.</param>
        </member>
        <member name="P:Colore.Events.DeviceAccessEventArgs.Granted">
            <summary>
            Gets a value indicating whether device access has been granted.
            </summary>
        </member>
        <member name="T:Colore.Events.SdkSupportEventArgs">
            <inheritdoc />
            <summary>
            Event arguments for the Chroma SDK support event.
            </summary>
        </member>
        <member name="M:Colore.Events.SdkSupportEventArgs.#ctor(System.Boolean)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Events.SdkSupportEventArgs" /> class.
            </summary>
            <param name="enabled">Value indicating whether SDK support is enabled.</param>
        </member>
        <member name="P:Colore.Events.SdkSupportEventArgs.Enabled">
            <summary>
            Gets a value indicating whether SDK support is enabled.
            </summary>
        </member>
        <member name="T:Colore.Helpers.ArrayHelper">
            <summary>
            Contains helper methods for working with arrays.
            </summary>
        </member>
        <member name="M:Colore.Helpers.ArrayHelper.CopyToMultidimensional(Colore.Data.Color[],Colore.Data.Color[0:,0:])">
            <summary>
            Copies a single-dimensional <see cref="T:Colore.Data.Color" /> array to a multi-dimensional one.
            </summary>
            <param name="source">Source array to copy from.</param>
            <param name="destination">Destination array to copy into.</param>
            <remarks>
            <paramref name="destination" /> array must be large enough to contain the values in the <paramref name="source" /> array.
            </remarks>
        </member>
        <member name="T:Colore.Helpers.EnvironmentHelper">
            <summary>
            Helper to get the architecture of the OS.
            </summary>
        </member>
        <member name="M:Colore.Helpers.EnvironmentHelper.Is64Bit">
            <summary>
            Determines whether the system is 64-bit.
            </summary>
            <returns><c>true</c> if the system is 64-bit, otherwise <c>false</c>.</returns>
        </member>
        <member name="T:Colore.Helpers.RegistryHelper">
            <summary>
            Contains helper methods for accessing the registry.
            </summary>
        </member>
        <member name="F:Colore.Helpers.RegistryHelper.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Helpers.RegistryHelper.SdkRegKeyPath">
            <summary>
            The path to the Razer Chroma SDK registry key.
            </summary>
        </member>
        <member name="M:Colore.Helpers.RegistryHelper.IsSdkAvailable">
            <summary>
            Checks if the Chroma SDK is available on this system.
            </summary>
            <returns><c>true</c> if Chroma SDK is available, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Helpers.RegistryHelper.TryGetSdkVersion(Colore.Data.SdkVersion@)">
            <summary>
            Attempts to extract the SDK version from the registry.
            </summary>
            <param name="ver">The SDK version will be saved in this variable.</param>
            <returns>
            <c>true</c> if the version was retrieved successfully and stored in <paramref name="ver" />,
            otherwise <c>false</c> with <c>(0, 0, 0)</c> stored in <paramref name="ver" />.
            </returns>
        </member>
        <member name="M:Colore.Helpers.RegistryHelper.GetSdkRegKeyPath">
            <summary>
            Gets the path to the Razer Chroma SDK registry key.
            </summary>
            <returns>Path to the Razer Chroma SDK registry key.</returns>
        </member>
        <member name="M:Colore.Helpers.RegistryHelper.IsSdkDllValid">
            <summary>
            Checks if the Chroma SDK DLL is valid by attempting to load it.
            </summary>
            <returns><c>true</c> if the DLL is valid and could be loaded; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Helpers.RegistryHelper.IsSdkEnabledInRegistry">
            <summary>
            Checks if the Chroma SDK is enabled in the Windows registry.
            </summary>
            <returns><c>true</c> if the SDK is enabled in the registry; otherwise, <c>false</c>.</returns>
            <remarks>
            On unsupported platforms or if the registry cannot be read, this method will fallback to <c>true</c>
            to maximize compatibility.
            </remarks>
        </member>
        <member name="T:Colore.Helpers.TaskHelper">
            <summary>
            Contains helper functions for working with async tasks.
            </summary>
        </member>
        <member name="F:Colore.Helpers.TaskHelper.CompletedTask">
            <summary>
            Gets a "completed task" object.
            </summary>
        </member>
        <member name="T:Colore.Helpers.UriHelper">
            <summary>
            Provides helper methods for working with URIs.
            </summary>
        </member>
        <member name="M:Colore.Helpers.UriHelper.Append(System.Uri,System.Uri)">
            <summary>
            Appends a <see cref="T:System.Uri" /> to another.
            </summary>
            <param name="uri">The "left" part of the new URI.</param>
            <param name="resource">The resource, or "right" part of the new URI.</param>
            <returns>
            A new <see cref="T:System.Uri" /> with <paramref name="resource" /> appended to <paramref name="uri" />.
            </returns>
        </member>
        <member name="T:Colore.IChroma">
            <summary>
            Interface for basic Chroma functionality.
            </summary>
        </member>
        <member name="E:Colore.IChroma.ApplicationState">
            <summary>
            Raised when information about application state is received from messages.
            </summary>
            <remarks>
            Requires that application has registered for receiving messages with
            <see cref="M:Colore.IChroma.Register(System.IntPtr)" /> and that Windows messages are being forwarded to
            Colore using <see cref="M:Colore.IChroma.HandleMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />.
            </remarks>
        </member>
        <member name="E:Colore.IChroma.DeviceAccess">
            <summary>
            Raised when information about device access is received from messages.
            </summary>
            <remarks>
            Requires that application has registered for receiving messages with
            <see cref="M:Colore.IChroma.Register(System.IntPtr)" /> and that Windows messages are being forwarded to
            Colore using <see cref="M:Colore.IChroma.HandleMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />.
            </remarks>
        </member>
        <member name="E:Colore.IChroma.SdkSupport">
            <summary>
            Raised when information about SDK support is received from messages.
            </summary>
            <remarks>
            Requires that application has registered for receiving messages with
            <see cref="M:Colore.IChroma.Register(System.IntPtr)" /> and that Windows messages are being forwarded to
            Colore using <see cref="M:Colore.IChroma.HandleMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />.
            </remarks>
        </member>
        <member name="P:Colore.IChroma.Keyboard">
            <summary>
            Gets an instance of the <see cref="T:Colore.IKeyboard" /> interface
            for interacting with a Razer Chroma keyboard.
            </summary>
        </member>
        <member name="P:Colore.IChroma.Mouse">
            <summary>
            Gets an instance of the <see cref="T:Colore.IMouse" /> interface
            for interacting with a Razer Chroma mouse.
            </summary>
        </member>
        <member name="P:Colore.IChroma.Headset">
            <summary>
            Gets an instance of the <see cref="T:Colore.IHeadset" /> interface
            for interacting with a Razer Chroma headset.
            </summary>
        </member>
        <member name="P:Colore.IChroma.Mousepad">
            <summary>
            Gets an instance of the <see cref="T:Colore.IMousepad" /> interface
            for interacting with a Razer Chroma mouse pad.
            </summary>
        </member>
        <member name="P:Colore.IChroma.Keypad">
            <summary>
            Gets an instance of the <see cref="T:Colore.IKeypad" /> interface
            for interacting with a Razer Chroma keypad.
            </summary>
        </member>
        <member name="P:Colore.IChroma.ChromaLink">
            <summary>
            Gets an instance of the <see cref="T:Colore.IChromaLink" /> interface
            for interacting with ChromaLink devices.
            </summary>
        </member>
        <member name="P:Colore.IChroma.Initialized">
            <summary>
            Gets a value indicating whether the Chroma
            SDK has been initialized or not.
            </summary>
        </member>
        <member name="P:Colore.IChroma.SdkVersion">
            <summary>
            Gets the version of the Chroma SDK that Colore is currently using.
            </summary>
        </member>
        <member name="P:Colore.IChroma.Version">
            <summary>
            Gets the <see cref="T:System.Version" /> of Colore.
            </summary>
        </member>
        <member name="M:Colore.IChroma.InitializeAsync(Colore.Data.AppInfo)">
            <summary>
            Initializes the SDK if it hasn't already.
            </summary>
            <param name="info">Information about the application.</param>
            <remarks>
            Manually modifying the SDK init state is <b>untested</b>
            and may result in <emph>undefined behaviour</emph>, usage
            is at <b>your own risk</b>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Colore.IChroma.UninitializeAsync">
            <summary>
            Uninitializes the SDK if it has been initialized.
            </summary>
            <remarks>
            Manually modifying the SDK init state is <b>untested</b>
            and may result in <emph>undefined behaviour</emph>, usage
            is at <b>your own risk</b>.
            </remarks>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Colore.IChroma.QueryAsync(System.Guid)">
            <summary>
            Queries the SDK for information regarding a specific device.
            </summary>
            <param name="deviceId">The device ID to query for, valid IDs can be found in <see cref="T:Colore.Data.Devices" />.</param>
            <returns>A struct with information regarding the device type and whether it's connected.</returns>
        </member>
        <member name="M:Colore.IChroma.GetDeviceAsync(System.Guid)">
            <summary>
            Gets an instance of <see cref="T:Colore.IGenericDevice" /> for
            the device with the specified ID.
            </summary>
            <param name="deviceId">
            The <see cref="T:System.Guid" /> of the device to get,
            valid IDs can be found in <see cref="T:Colore.Data.Devices" />.
            </param>
            <returns>An instance of <see cref="T:Colore.IGenericDevice" />.</returns>
        </member>
        <member name="M:Colore.IChroma.SetAllAsync(Colore.Data.Color)">
            <summary>
            Sets all Chroma devices to the specified <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="M:Colore.IChroma.HandleMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <summary>
            Handles a Windows message and fires the appropriate events.
            </summary>
            <param name="handle">The <c>HWnd</c> property of the Message struct.</param>
            <param name="msgId">The <c>Msg</c> property of the Message struct.</param>
            <param name="wParam">The <c>wParam</c> property of the Message struct.</param>
            <param name="lParam">The <c>lParam</c> property of the Message struct.</param>
            <returns><c>true</c> if the message was handled by Chroma, <c>false</c> otherwise (message was ignored).</returns>
            <remarks>Non-Chroma messages will be ignored.</remarks>
        </member>
        <member name="M:Colore.IChroma.Register(System.IntPtr)">
            <summary>
            Registers to start receiving Chroma events.
            </summary>
            <param name="handle">Handle to the application Window that is running the message loop.</param>
            <remarks>
            Chroma events are sent using the Windows message API, as such, there has to be something handling
            Windows messages to receive them. Messages need to be passed to the message handler in Colore to
            be processed, as this cannot be automated.
            </remarks>
        </member>
        <member name="M:Colore.IChroma.Unregister">
            <summary>
            Unregisters from receiving Chroma events.
            </summary>
        </member>
        <member name="T:Colore.IChromaLink">
            <inheritdoc />
            <summary>
            Interface for Chroma Link functionality.
            </summary>
        </member>
        <member name="P:Colore.IChromaLink.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Colore.Data.Color" /> for a specific zone on the Chroma Link device.
            The SDK will translate this appropriately depending on user configuration.
            </summary>
            <param name="index">The zone to access.</param>
            <returns>The color currently set for the specified key.</returns>
        </member>
        <member name="M:Colore.IChromaLink.SetEffectAsync(Colore.Effects.ChromaLink.ChromaLinkEffectType)">
            <summary>
            Sets an effect without any parameters.
            </summary>
            <param name="effectType">Effect options.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IChromaLink.IsSet(System.Int32)">
            <summary>
            Returns whether an element has had a custom color set.
            </summary>
            <param name="index">The index to query.</param>
            <returns><c>true</c> if the position has a color set that is not black, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.IChromaLink.SetCustomAsync(Colore.Effects.ChromaLink.CustomChromaLinkEffect)">
            <summary>
            Sets a <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> effect on the Chroma Link.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IChromaLink.SetStaticAsync(Colore.Effects.ChromaLink.StaticChromaLinkEffect)">
            <summary>
            Sets a <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> effect on the Chroma Link.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IChromaLink.SetStaticAsync(Colore.Data.Color)">
            <summary>
            Sets a <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> effect on the Chroma Link.
            </summary>
            <param name="color">Color of the effect.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="T:Colore.IDevice">
            <summary>
            Interface for functionality common with all devices.
            </summary>
        </member>
        <member name="P:Colore.IDevice.CurrentEffectId">
            <summary>
            Gets the ID of the currently active effect.
            </summary>
        </member>
        <member name="M:Colore.IDevice.ClearAsync">
            <summary>
            Clears the current effect on the device.
            </summary>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IDevice.SetAllAsync(Colore.Data.Color)">
            <summary>
            Sets the color of all components on this device.
            </summary>
            <param name="color">Color to set.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IDevice.SetEffectAsync(System.Guid)">
            <summary>
            Updates the device to use the effect pointed to by the specified GUID.
            </summary>
            <param name="effectId">GUID to set.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="T:Colore.IGenericDevice">
            <inheritdoc />
            <summary>
            Interface for generic devices.
            </summary>
        </member>
        <member name="P:Colore.IGenericDevice.DeviceId">
            <summary>
            Gets the <see cref="T:System.Guid" /> of this device.
            </summary>
        </member>
        <member name="M:Colore.IGenericDevice.SetEffectAsync(Colore.Effects.Generic.EffectType)">
            <summary>
            Sets a parameter-less effect on this device.
            </summary>
            <param name="effectType">Effect to set.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IGenericDevice.SetEffectAsync``1(Colore.Effects.Generic.EffectType,``0)">
            <summary>
            Sets an effect on this device, taking a parameter.
            </summary>
            <typeparam name="T">The type of effect data to set.</typeparam>
            <param name="effectType">Effect to set.</param>
            <param name="data">Effect-specific parameter to use.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="T:Colore.IHeadset">
            <inheritdoc />
            <summary>
            Interface for headset functionality.
            </summary>
        </member>
        <member name="P:Colore.IHeadset.Item(System.Int32)">
            <summary>
            Gets or sets the color of a specific LED on the headset.
            </summary>
            <param name="index">The index to access.</param>
            <returns>The current <see cref="T:Colore.Data.Color" /> at the <paramref name="index" />.</returns>
        </member>
        <member name="M:Colore.IHeadset.SetEffectAsync(Colore.Effects.Headset.HeadsetEffectType)">
            <summary>
            Sets an effect on the headset that doesn't
            take any parameters, currently only valid
            for the <see cref="F:Colore.Effects.Headset.HeadsetEffectType.None" /> effect.
            </summary>
            <param name="effectType">The type of effect to set.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IHeadset.SetStaticAsync(Colore.Effects.Headset.StaticHeadsetEffect)">
            <summary>
            Sets a new static effect on the headset.
            </summary>
            <param name="effect">
            An instance of the <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> struct
            describing the effect.
            </param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IHeadset.SetStaticAsync(Colore.Data.Color)">
            <summary>
            Sets a new <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> effect on
            the headset using the specified <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color"><see cref="T:Colore.Data.Color" /> of the effect.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IHeadset.SetCustomAsync(Colore.Effects.Headset.CustomHeadsetEffect)">
            <summary>
            Sets a new <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> effect on the headset.
            </summary>
            <param name="effect">
            An instance of the <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> struct
            describing the effect.
            </param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="T:Colore.IKeyboard">
            <inheritdoc />
            <summary>
            Interface for keyboard functionality.
            </summary>
        </member>
        <member name="P:Colore.IKeyboard.IsDeathstalkerConnected">
            <summary>
            Gets a value indicating whether a Razer Deathstalker Chroma is connected to the system.
            </summary>
        </member>
        <member name="P:Colore.IKeyboard.Item(Colore.Effects.Keyboard.Key)">
            <summary>
            Gets or sets the <see cref="T:Colore.Data.Color" /> for a specific <see cref="T:Colore.Effects.Keyboard.Key" /> on the keyboard.
            The SDK will translate this appropriately depending on user configuration.
            </summary>
            <param name="key">The key to access.</param>
            <returns>The color currently set for the specified key.</returns>
        </member>
        <member name="P:Colore.IKeyboard.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Colore.Data.Color" /> for a specific row and column on the
            keyboard grid.
            </summary>
            <param name="row">Row to query, between 0 and <see cref="F:Colore.Effects.Keyboard.KeyboardConstants.MaxRows" /> (exclusive upper-bound).</param>
            <param name="column">Column to query, between 0 and <see cref="F:Colore.Effects.Keyboard.KeyboardConstants.MaxColumns" /> (exclusive upper-bound).</param>
            <returns>The color currently set on the specified position.</returns>
        </member>
        <member name="P:Colore.IKeyboard.Item(System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Colore.Data.Color" /> for a specific Deathstalker zone.
            </summary>
            <param name="zoneIndex">Zone to query, between 0 and <see cref="F:Colore.Effects.Keyboard.KeyboardConstants.MaxDeathstalkerZones" /> (exclusive upper bound).</param>
            <returns>The color currently set for the specified zone.</returns>
        </member>
        <member name="M:Colore.IKeyboard.IsSet(Colore.Effects.Keyboard.Key)">
            <summary>
            Returns whether a certain key has had a custom color set.
            </summary>
            <param name="key">Key to check.</param>
            <returns><c>true</c> if the key has a color set, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.IKeyboard.SetCustomAsync(Colore.Effects.Keyboard.CustomKeyboardEffect)">
            <summary>
            Sets a custom grid effect on the keyboard.
            </summary>
            <param name="effect">Effect options.</param>
            <remarks>
            This will overwrite the current internal <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" />
            struct in the <see cref="T:Colore.Implementations.KeyboardImplementation" /> class.
            </remarks>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeyboard.SetExtendedCustomAsync(Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect)">
            <summary>
            Sets an extended custom grid effect on the keyboard.
            </summary>
            <param name="effect">Effect options.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeyboard.SetEffectAsync(Colore.Effects.Keyboard.KeyboardEffectType)">
            <summary>
            Sets an effect without any parameters.
            Currently, this only works for the <see cref="F:Colore.Effects.Keyboard.KeyboardEffectType.None" /> effect.
            </summary>
            <param name="effectType">Effect options.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeyboard.SetPositionAsync(System.Int32,System.Int32,Colore.Data.Color,System.Boolean)">
            <summary>
            Sets the color on a specific row and column on the keyboard grid.
            </summary>
            <param name="row">Row to set, between 1 and <see cref="F:Colore.Effects.Keyboard.KeyboardConstants.MaxRows" />.</param>
            <param name="column">Column to set, between 1 and <see cref="F:Colore.Effects.Keyboard.KeyboardConstants.MaxColumns" />.</param>
            <param name="color">Color to set.</param>
            <param name="clear">Whether or not to clear the existing colors before setting this one.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeyboard.SetKeyAsync(Colore.Effects.Keyboard.Key,Colore.Data.Color,System.Boolean)">
            <summary>
            Sets the color of a specific key on the keyboard.
            </summary>
            <param name="key">Key to modify.</param>
            <param name="color">Color to set.</param>
            <param name="clear">If <c>true</c>, the keyboard will first be cleared before setting the key.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeyboard.SetKeysAsync(Colore.Data.Color,Colore.Effects.Keyboard.Key,Colore.Effects.Keyboard.Key[])">
            <summary>
            Sets the specified color on a set of keys.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to apply.</param>
            <param name="key">First key to change.</param>
            <param name="keys">Additional keys that should also have the color applied.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeyboard.SetKeysAsync(System.Collections.Generic.IEnumerable{Colore.Effects.Keyboard.Key},Colore.Data.Color,System.Boolean)">
            <summary>
            Sets a color on a collection of keys.
            </summary>
            <param name="keys">The keys which should have their color changed.</param>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to apply.</param>
            <param name="clear">If <c>true</c>, the keyboard will first be cleared before setting the keys.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeyboard.SetStaticAsync(Colore.Effects.Keyboard.StaticKeyboardEffect)">
            <summary>
            Sets a static color on the keyboard.
            </summary>
            <param name="effect">Effect options.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeyboard.SetDeathstalkerZoneAsync(System.Int32,Colore.Data.Color,System.Boolean)">
            <summary>
            Sets the specified Deathstalker zone to a color.
            </summary>
            <param name="zoneIndex">The index of the Deathstalker zone to set.</param>
            <param name="color">The color to set.</param>
            <param name="clear">Whether to clear all colors before setting the new one.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeyboard.SetDeathstalkerAsync(Colore.Effects.Keyboard.DeathstalkerGridEffect)">
            <summary>
            Sets a Deathstalker grid effect.
            </summary>
            <param name="effect">The Deathstalker grid effect to set.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="T:Colore.IKeypad">
            <inheritdoc />
            <summary>
            Interface for keypad functions.
            </summary>
        </member>
        <member name="P:Colore.IKeypad.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets a color at the specified position in the keypad's grid layout.
            </summary>
            <param name="row">The row to access (between <c>0</c> and <see cref="F:Colore.Effects.Keypad.KeypadConstants.MaxRows" />, exclusive upper-bound).</param>
            <param name="column">The column to access (between <c>0</c> and <see cref="F:Colore.Effects.Keypad.KeypadConstants.MaxColumns" />, exclusive upper-bound).</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="M:Colore.IKeypad.IsSet(System.Int32,System.Int32)">
            <summary>
            Returns whether a key has had a custom color set.
            </summary>
            <param name="row">The row to query.</param>
            <param name="column">The column to query.</param>
            <returns><c>true</c> if the position has a color set that is not black, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.IKeypad.SetCustomAsync(Colore.Effects.Keypad.CustomKeypadEffect)">
            <summary>
            Sets a <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> effect on the keypad.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeypad.SetStaticAsync(Colore.Effects.Keypad.StaticKeypadEffect)">
            <summary>
            Sets a <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> effect on the keypad.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeypad.SetStaticAsync(Colore.Data.Color)">
            <summary>
            Sets a <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> effect on the keypad.
            </summary>
            <param name="color">Color of the effect.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IKeypad.SetEffectAsync(Colore.Effects.Keypad.KeypadEffectType)">
            <summary>
            Sets an effect without any parameters.
            Currently, this only works for the <see cref="F:Colore.Effects.Keypad.KeypadEffectType.None" /> effect.
            </summary>
            <param name="effectType">Effect options.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="T:Colore.IMouse">
            <inheritdoc />
            <summary>
            Interface for mouse functionality.
            </summary>
        </member>
        <member name="P:Colore.IMouse.Item(System.Int32,System.Int32)">
            <summary>
            Gets or sets the <see cref="T:Colore.Data.Color" /> for a specific position
            on the mouse's virtual grid.
            </summary>
            <param name="row">The row to query, between <c>0</c> and <see cref="F:Colore.Effects.Mouse.MouseConstants.MaxRows" /> (exclusive upper-bound).</param>
            <param name="column">The column to query, between <c>0</c> and <see cref="F:Colore.Effects.Mouse.MouseConstants.MaxColumns" /> (exclusive upper-bound).</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="P:Colore.IMouse.Item(Colore.Effects.Mouse.GridLed)">
            <summary>
            Gets or sets the <see cref="T:Colore.Data.Color" /> for a specified <see cref="T:Colore.Effects.Mouse.GridLed" />
            on the mouse's virtual grid.
            </summary>
            <param name="led">The <see cref="T:Colore.Effects.Mouse.GridLed" /> to query.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> currently set for the specified <see cref="T:Colore.Effects.Mouse.GridLed" />.</returns>
        </member>
        <member name="M:Colore.IMouse.SetEffectAsync(Colore.Effects.Mouse.MouseEffectType)">
            <summary>
            Sets an effect without any parameters.
            Currently, this only works for the <see cref="F:Colore.Effects.Mouse.MouseEffectType.None" /> effect.
            </summary>
            <param name="effectType">Effect options.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IMouse.SetStaticAsync(Colore.Effects.Mouse.StaticMouseEffect)">
            <summary>
            Sets a static color on the mouse.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> effect.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IMouse.SetStaticAsync(Colore.Data.Color,Colore.Effects.Mouse.Led)">
            <summary>
            Sets a static effect on the mouse.
            </summary>
            <param name="color">The color to use.</param>
            <param name="led">Which LED(s) to affect.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IMouse.SetGridAsync(Colore.Effects.Mouse.CustomMouseEffect)">
            <summary>
            Sets a custom grid effect on the mouse.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="T:Colore.IMousepad">
            <inheritdoc />
            <summary>
            Interface for mouse pad functionality.
            </summary>
        </member>
        <member name="P:Colore.IMousepad.Item(System.Int32)">
            <summary>
            Gets or sets a specific LED on the mouse pad.
            </summary>
            <param name="index">The index to access.</param>
            <returns>The current <see cref="T:Colore.Data.Color" /> at the <paramref name="index"/>.</returns>
        </member>
        <member name="M:Colore.IMousepad.SetStaticAsync(Colore.Effects.Mousepad.StaticMousepadEffect)">
            <summary>
            Sets a static color effect on the mouse pad.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Mousepad.StaticMousepadEffect" /> struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IMousepad.SetStaticAsync(Colore.Data.Color)">
            <summary>
            Sets a static color effect on the mouse pad.
            </summary>
            <param name="color">Color to set.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IMousepad.SetCustomAsync(Colore.Effects.Mousepad.CustomMousepadEffect)">
            <summary>
            Sets a custom effect on the mouse pad.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.IMousepad.SetEffectAsync(Colore.Effects.Mousepad.MousepadEffectType)">
            <summary>
            Sets an effect without any parameters.
            Currently, this only works for the <see cref="F:Colore.Effects.Mousepad.MousepadEffectType.None" /> effect.
            </summary>
            <param name="effectType">Effect options.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="T:Colore.Implementations.ChromaImplementation">
            <inheritdoc />
            <summary>
            Main class for interacting with the Chroma SDK.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation._api">
            <summary>
            Reference to the API instance in use.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation._deviceInstances">
            <summary>
            Cache of created <see cref="T:Colore.IGenericDevice" /> instances.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation._registered">
            <summary>
            Keeps track of whether we have registered to receive Chroma events.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation._registeredHandle">
            <summary>
            Keeps track of the window handle that is registered to receive events.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation._sdkVersion">
            <summary>
            Version of the Chroma SDK as retrieved from the registry at
            the point of initialization.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation._keyboard">
            <summary>
            Reference to lazy-loaded <see cref="P:Colore.Implementations.ChromaImplementation.Keyboard" /> instance.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation._mouse">
            <summary>
            Reference to lazy-loaded <see cref="P:Colore.Implementations.ChromaImplementation.Mouse" /> instance.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation._headset">
            <summary>
            Reference to lazy-loaded <see cref="P:Colore.Implementations.ChromaImplementation.Headset" /> instance.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation._mousepad">
            <summary>
            Reference to lazy-loaded <see cref="P:Colore.Implementations.ChromaImplementation.Mousepad" /> instance.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation._keypad">
            <summary>
            Reference to lazy-loaded <see cref="P:Colore.Implementations.ChromaImplementation.Keypad" /> instance.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaImplementation._chromaLink">
            <summary>
            Reference to lazy-loaded <see cref="P:Colore.Implementations.ChromaImplementation.ChromaLink" /> instance.
            </summary>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.#ctor(Colore.Api.IChromaApi,Colore.Data.AppInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Implementations.ChromaImplementation" /> class.
            </summary>
            <param name="api">API instance to use.</param>
            <param name="info">Information about the application.</param>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Colore.Implementations.ChromaImplementation" /> class.
            </summary>
            <remarks>
            Calls the SDK <c>UnInit</c> function.
            </remarks>
        </member>
        <member name="E:Colore.Implementations.ChromaImplementation.ApplicationState">
            <inheritdoc />
            <summary>
            Raised when information about application state is received from messages.
            </summary>
            <remarks>
            Requires that application has registered for receiving messages with
            <see cref="M:Colore.IChroma.Register(System.IntPtr)" /> and that Windows messages are being forwarded to
            Colore using <see cref="M:Colore.IChroma.HandleMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />.
            </remarks>
        </member>
        <member name="E:Colore.Implementations.ChromaImplementation.DeviceAccess">
            <inheritdoc />
            <summary>
            Raised when information about device access is received from messages.
            </summary>
            <remarks>
            Requires that application has registered for receiving messages with
            <see cref="M:Colore.IChroma.Register(System.IntPtr)" /> and that Windows messages are being forwarded to
            Colore using <see cref="M:Colore.IChroma.HandleMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />.
            </remarks>
        </member>
        <member name="E:Colore.Implementations.ChromaImplementation.SdkSupport">
            <inheritdoc />
            <summary>
            Raised when information about SDK support is received from messages.
            </summary>
            <remarks>
            Requires that application has registered for receiving messages with
            <see cref="M:Colore.IChroma.Register(System.IntPtr)" /> and that Windows messages are being forwarded to
            Colore using <see cref="M:Colore.IChroma.HandleMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />.
            </remarks>
        </member>
        <member name="P:Colore.Implementations.ChromaImplementation.SdkAvailable">
            <summary>
            Gets a value indicating whether the SDK is available on this system.
            </summary>
        </member>
        <member name="P:Colore.Implementations.ChromaImplementation.Keyboard">
            <inheritdoc />
            <summary>
            Gets an instance of the <see cref="T:Colore.IKeyboard" /> interface
            for interacting with a Razer Chroma keyboard.
            </summary>
        </member>
        <member name="P:Colore.Implementations.ChromaImplementation.Mouse">
            <inheritdoc />
            <summary>
            Gets an instance of the <see cref="T:Colore.IMouse" /> interface
            for interacting with a Razer Chroma mouse.
            </summary>
        </member>
        <member name="P:Colore.Implementations.ChromaImplementation.Headset">
            <inheritdoc />
            <summary>
            Gets an instance of the <see cref="T:Colore.IHeadset" /> interface
            for interacting with a Razer Chroma headset.
            </summary>
        </member>
        <member name="P:Colore.Implementations.ChromaImplementation.Mousepad">
            <inheritdoc />
            <summary>
            Gets an instance of the <see cref="T:Colore.IMousepad" /> interface
            for interacting with a Razer Chroma mouse pad.
            </summary>
        </member>
        <member name="P:Colore.Implementations.ChromaImplementation.Keypad">
            <inheritdoc />
            <summary>
            Gets an instance of the <see cref="T:Colore.IKeypad" /> interface
            for interacting with a Razer Chroma keypad.
            </summary>
        </member>
        <member name="P:Colore.Implementations.ChromaImplementation.ChromaLink">
            <inheritdoc />
            <summary>
            Gets an instance of the <see cref="T:Colore.IChromaLink" /> interface
            for interacting with ChromaLink devices.
            </summary>
        </member>
        <member name="P:Colore.Implementations.ChromaImplementation.Initialized">
            <inheritdoc />
            <summary>
            Gets a value indicating whether the Chroma
            SDK has been initialized or not.
            </summary>
        </member>
        <member name="P:Colore.Implementations.ChromaImplementation.SdkVersion">
            <inheritdoc />
            <summary>
            Gets the version of the Chroma SDK that Colore is currently using.
            </summary>
        </member>
        <member name="P:Colore.Implementations.ChromaImplementation.Version">
            <inheritdoc />
            <summary>
            Gets the <see cref="T:System.Version" /> of Colore.
            </summary>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.Dispose">
            <inheritdoc />
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.InitializeAsync(Colore.Data.AppInfo)">
            <inheritdoc />
            <summary>
            Initializes the SDK if it hasn't already.
            </summary>
            <param name="info">
            Information about the application. Can be <c>null</c> only if the Native SDK backend is used.
            </param>
            <remarks>
            <span style="color: red;">Manual manipulation of the SDK state is
            <strong>not supported by the CoraleStudios team</strong> and may
            result in <emph>undefined behaviour</emph>. Usage of this method is
            <strong>at your own risk</strong>.</span>
            </remarks>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.UninitializeAsync">
            <inheritdoc />
            <summary>
            Uninitializes the SDK if it has been initialized.
            </summary>
            <remarks>
            <span style="color: red;">Manual manipulation of the SDK state is
            <strong>not supported by the CoraleStudios team</strong> and may
            result in <emph>undefined behaviour</emph>. Usage of this method is
            <strong>at your own risk</strong>. Usage of SDK functions while
            the SDK is in an <emph>uninitialized</emph> state is <strong>highly
            advised against</strong> and <emph>WILL</emph> result in catastrophic
            failure. <strong>YOU HAVE BEEN WARNED</strong>.</span>
            </remarks>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.QueryAsync(System.Guid)">
            <inheritdoc />
            <summary>
            Queries the SDK for information regarding a specific device.
            </summary>
            <param name="deviceId">The device ID to query for, valid IDs can be found in <see cref="T:Colore.Data.Devices" />.</param>
            <returns>A struct with information regarding the device type and whether it's connected.</returns>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.GetDeviceAsync(System.Guid)">
            <inheritdoc />
            <summary>
            Gets an instance of <see cref="T:Colore.IGenericDevice" /> for
            the device with the specified ID.
            </summary>
            <param name="deviceId">
            The <see cref="T:System.Guid" /> of the device to get,
            valid IDs can be found in <see cref="T:Colore.Data.Devices" />.
            </param>
            <returns>An instance of <see cref="T:Colore.IGenericDevice" />.</returns>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.HandleMessage(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)">
            <inheritdoc />
            <summary>
            Handles a Windows message and fires the appropriate events.
            </summary>
            <param name="handle">The <c>HWnd</c> property of the Message struct.</param>
            <param name="msgId">The <c>Msg</c> property of the Message struct.</param>
            <param name="wParam">The <c>wParam</c> property of the Message struct.</param>
            <param name="lParam">The <c>lParam</c> property of the Message struct.</param>
            <returns><c>true</c> if the message was handled by Chroma, <c>false</c> otherwise (message was ignored).</returns>
            <remarks>Non-Chroma messages will be ignored.</remarks>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.Register(System.IntPtr)">
            <inheritdoc />
            <summary>
            Registers to start receiving Chroma events.
            </summary>
            <param name="handle">Handle to the application Window that is running the message loop.</param>
            <remarks>
            Chroma events are sent using the Windows message API, as such, there has to be something handling
            Windows messages to receive them. Messages need to be passed to the message handler in Colore to
            be processed, as this cannot be automated.
            </remarks>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.Unregister">
            <inheritdoc />
            <summary>
            Unregisters from receiving Chroma events.
            </summary>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.SetAllAsync(Colore.Data.Color)">
            <inheritdoc />
            <summary>
            Sets all Chroma devices to the specified <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to set.</param>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.Dispose(System.Boolean)">
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
            <param name="disposing">
            <c>true</c> if this is being called from <see cref="M:Colore.Implementations.ChromaImplementation.Dispose" />; otherwise, <c>false</c>.
            </param>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.OnApplicationState(System.Boolean)">
            <summary>
            Invokes the application state event handlers with the specified parameter.
            </summary>
            <param name="enabled">Whether or not the application was put in an enabled state.</param>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.OnDeviceAccess(System.Boolean)">
            <summary>
            Invokes the device access event handlers with the specified parameter.
            </summary>
            <param name="granted">Whether or not access to the device was granted.</param>
        </member>
        <member name="M:Colore.Implementations.ChromaImplementation.OnSdkSupport(System.Boolean)">
            <summary>
            Invokes the SDK support event handlers with the specified parameter.
            </summary>
            <param name="enabled">Whether or not the SDK is supported.</param>
        </member>
        <member name="T:Colore.Implementations.ChromaLinkImplementation">
            <inheritdoc cref="T:Colore.IChromaLink" />
            <inheritdoc cref="T:Colore.Implementations.DeviceImplementation" />
            <summary>
            Class for interacting with a Chroma Link.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaLinkImplementation.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Implementations.ChromaLinkImplementation._custom">
            <summary>
            Internal instance of a <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> struct used for
            the indexer.
            </summary>
        </member>
        <member name="M:Colore.Implementations.ChromaLinkImplementation.#ctor(Colore.Api.IChromaApi)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Implementations.ChromaLinkImplementation" /> class.
            </summary>
        </member>
        <member name="P:Colore.Implementations.ChromaLinkImplementation.Item(System.Int32)">
            <inheritdoc />
            <summary>
            Gets or sets a color at the specified position in the Chroma Link.
            </summary>
            <param name="index">The index to access (between <c>0</c> and <see cref="F:Colore.Effects.ChromaLink.ChromaLinkConstants.MaxLeds" />, exclusive upper-bound).</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="M:Colore.Implementations.ChromaLinkImplementation.IsSet(System.Int32)">
            <inheritdoc />
            <summary>
            Returns whether an element has had a custom color set.
            </summary>
            <param name="index">The index to query.</param>
            <returns><c>true</c> if the position has a color set that is not black, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Implementations.ChromaLinkImplementation.SetAllAsync(Colore.Data.Color)">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.SetAllAsync(Colore.Data.Color)" />
            <summary>
            Sets the color of all lights in Chroma Link.
            </summary>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Colore.Implementations.ChromaLinkImplementation.SetEffectAsync(Colore.Effects.ChromaLink.ChromaLinkEffectType)">
            <inheritdoc />
            <summary>
            Sets an effect without any parameters.
            Currently, this only works for the <see cref="F:Colore.Effects.ChromaLink.ChromaLinkEffectType.None" /> and <see cref="F:Colore.Effects.ChromaLink.ChromaLinkEffectType.Static" /> effects.
            </summary>
            <param name="effectType">Effect options.</param>
        </member>
        <member name="M:Colore.Implementations.ChromaLinkImplementation.SetCustomAsync(Colore.Effects.ChromaLink.CustomChromaLinkEffect)">
            <inheritdoc />
            <summary>
            Sets a <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> effect on the Chroma Link.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> struct.</param>
        </member>
        <member name="M:Colore.Implementations.ChromaLinkImplementation.SetStaticAsync(Colore.Effects.ChromaLink.StaticChromaLinkEffect)">
            <inheritdoc />
            <summary>
            Sets a <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> effect on the Chroma Link.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> struct.</param>
        </member>
        <member name="M:Colore.Implementations.ChromaLinkImplementation.SetStaticAsync(Colore.Data.Color)">
            <inheritdoc />
            <summary>
            Sets a <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> effect on the Chroma Link.
            </summary>
            <param name="color">Color of the effect.</param>
        </member>
        <member name="M:Colore.Implementations.ChromaLinkImplementation.ClearAsync">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.ClearAsync" />
            <summary>
            Clears the current effect on the Chroma Link.
            </summary>
        </member>
        <member name="T:Colore.Implementations.DeviceImplementation">
            <inheritdoc />
            <summary>
            Base class for devices, containing code common between all devices.
            </summary>
        </member>
        <member name="M:Colore.Implementations.DeviceImplementation.#ctor(Colore.Api.IChromaApi)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Implementations.DeviceImplementation" /> class.
            </summary>
            <param name="api">Reference to the Chroma API in use.</param>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="api" /> is null.</exception>
        </member>
        <member name="P:Colore.Implementations.DeviceImplementation.CurrentEffectId">
            <inheritdoc />
            <summary>
            Gets or sets the ID of the currently active effect.
            </summary>
        </member>
        <member name="P:Colore.Implementations.DeviceImplementation.Api">
            <summary>
            Gets the Chroma API instance.
            </summary>
        </member>
        <member name="M:Colore.Implementations.DeviceImplementation.ClearAsync">
            <inheritdoc />
            <summary>
            Clears the current effect on the device.
            </summary>
        </member>
        <member name="M:Colore.Implementations.DeviceImplementation.SetAllAsync(Colore.Data.Color)">
            <inheritdoc />
            <summary>
            Sets the color of all components on this device.
            </summary>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Colore.Implementations.DeviceImplementation.SetEffectAsync(System.Guid)">
            <inheritdoc />
            <summary>
            Updates the device to use the effect pointed to by the specified GUID.
            </summary>
            <param name="effectId">GUID to set.</param>
        </member>
        <member name="M:Colore.Implementations.DeviceImplementation.DeleteCurrentEffectAsync">
            <summary>
            Deletes the currently set effect.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task"/> representing the asynchronous operation.</returns>
        </member>
        <member name="T:Colore.Implementations.GenericDeviceImplementation">
            <inheritdoc cref="T:Colore.IGenericDevice" />
            <inheritdoc cref="T:Colore.Implementations.DeviceImplementation" />
            <summary>
            A generic device.
            </summary>
        </member>
        <member name="F:Colore.Implementations.GenericDeviceImplementation.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="M:Colore.Implementations.GenericDeviceImplementation.#ctor(System.Guid,Colore.Api.IChromaApi)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Implementations.GenericDeviceImplementation" /> class.
            </summary>
            <param name="deviceId">The <see cref="T:System.Guid" /> of the device.</param>
            <param name="api">Reference to the Chroma API instance in use.</param>
            <exception cref="T:Colore.UnsupportedDeviceException">
            Thrown if <paramref name="deviceId" /> is not a valid Razer Chroma device ID.
            </exception>
        </member>
        <member name="P:Colore.Implementations.GenericDeviceImplementation.DeviceId">
            <inheritdoc />
            <summary>
            Gets the <see cref="T:System.Guid" /> of this device.
            </summary>
        </member>
        <member name="M:Colore.Implementations.GenericDeviceImplementation.ClearAsync">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.ClearAsync" />
            <summary>
            Clears the current effect on Generic Devices.
            </summary>
        </member>
        <member name="M:Colore.Implementations.GenericDeviceImplementation.SetAllAsync(Colore.Data.Color)">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.SetAllAsync(Colore.Data.Color)" />
            <summary>
            Throws a <see cref="T:System.NotSupportedException" />, due to inability to set colors on generic devices.
            </summary>
            <param name="color">Color to set.</param>
            <exception cref="T:System.NotSupportedException">Always thrown, setting colors on generic devices is not supported.</exception>
        </member>
        <member name="M:Colore.Implementations.GenericDeviceImplementation.SetEffectAsync(Colore.Effects.Generic.EffectType)">
            <inheritdoc />
            <summary>
            Sets a parameter-less effect on this device.
            </summary>
            <param name="effectType">Effect to set.</param>
        </member>
        <member name="M:Colore.Implementations.GenericDeviceImplementation.SetEffectAsync``1(Colore.Effects.Generic.EffectType,``0)">
            <inheritdoc />
            <summary>
            Sets an effect on this device, taking a parameter.
            </summary>
            <param name="effectType">Effect to set.</param>
            <param name="data">Effect-specific parameter to use.</param>
        </member>
        <member name="T:Colore.Implementations.HeadsetImplementation">
            <inheritdoc cref="T:Colore.IHeadset" />
            <inheritdoc cref="T:Colore.Implementations.DeviceImplementation" />
            <summary>
            Class for interacting with Chroma Headsets.
            </summary>
        </member>
        <member name="F:Colore.Implementations.HeadsetImplementation.Log">
            <summary>
            Loggers instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Implementations.HeadsetImplementation._custom">
            <summary>
            Internal <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> struct used for effects.
            </summary>
        </member>
        <member name="M:Colore.Implementations.HeadsetImplementation.#ctor(Colore.Api.IChromaApi)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Implementations.HeadsetImplementation" /> class.
            </summary>
            <param name="api">Reference to the Chroma API instance in use.</param>
        </member>
        <member name="P:Colore.Implementations.HeadsetImplementation.Item(System.Int32)">
            <inheritdoc />
            <summary>
            Gets or sets the color of a specific LED on the headset.
            </summary>
            <param name="index">The index to access.</param>
            <returns>The current <see cref="T:Colore.Data.Color" /> at the <paramref name="index" />.</returns>
        </member>
        <member name="M:Colore.Implementations.HeadsetImplementation.SetAllAsync(Colore.Data.Color)">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.SetAllAsync(Colore.Data.Color)" />
            <summary>
            Sets the color of all components on this device.
            </summary>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Colore.Implementations.HeadsetImplementation.SetEffectAsync(Colore.Effects.Headset.HeadsetEffectType)">
            <inheritdoc />
            <summary>
            Sets an effect on the headset that doesn't
            take any parameters, currently only valid
            for the <see cref="F:Colore.Effects.Headset.HeadsetEffectType.None" /> effect.
            </summary>
            <param name="effectType">The type of effect to set.</param>
        </member>
        <member name="M:Colore.Implementations.HeadsetImplementation.SetStaticAsync(Colore.Effects.Headset.StaticHeadsetEffect)">
            <inheritdoc />
            <summary>
            Sets a new static effect on the headset.
            </summary>
            <param name="effect">
            An instance of the <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> struct
            describing the effect.
            </param>
        </member>
        <member name="M:Colore.Implementations.HeadsetImplementation.SetStaticAsync(Colore.Data.Color)">
            <inheritdoc />
            <summary>
            Sets a new <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> effect on
            the headset using the specified <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="color"><see cref="T:Colore.Data.Color" /> of the effect.</param>
        </member>
        <member name="M:Colore.Implementations.HeadsetImplementation.SetCustomAsync(Colore.Effects.Headset.CustomHeadsetEffect)">
            <inheritdoc />
            <summary>
            Sets a new <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> effect on the headset.
            </summary>
            <param name="effect">
            An instance of the <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> struct
            describing the effect.
            </param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.Implementations.HeadsetImplementation.ClearAsync">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.ClearAsync" />
            <summary>
            Clears the current effect on the Headset.
            </summary>
        </member>
        <member name="T:Colore.Implementations.KeyboardImplementation">
            <inheritdoc cref="T:Colore.IKeyboard" />
            <inheritdoc cref="T:Colore.Implementations.DeviceImplementation" />
            <summary>
            Class for interacting with a Chroma keyboard.
            </summary>
        </member>
        <member name="F:Colore.Implementations.KeyboardImplementation.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Implementations.KeyboardImplementation._grid">
            <summary>
            Grid struct used for the helper methods.
            </summary>
        </member>
        <member name="F:Colore.Implementations.KeyboardImplementation._deathstalkerGrid">
            <summary>
            Deathstalker grid struct used for the helper methods.
            </summary>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.#ctor(Colore.Api.IChromaApi)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Implementations.KeyboardImplementation" /> class.
            </summary>
        </member>
        <member name="P:Colore.Implementations.KeyboardImplementation.IsDeathstalkerConnected">
            <inheritdoc />
            <summary>
            Gets a value indicating whether a Razer Deathstalker Chroma is connected to the system.
            </summary>
            <remarks>
            This performs an SDK query on each access, to avoid caching issues.
            </remarks>
        </member>
        <member name="P:Colore.Implementations.KeyboardImplementation.Item(Colore.Effects.Keyboard.Key)">
            <inheritdoc />
            <summary>
            Gets or sets the <see cref="T:Colore.Data.Color" /> for a specific <see cref="T:Colore.Effects.Keyboard.Key" /> on the keyboard.
            The SDK will translate this appropriately depending on user configuration.
            </summary>
            <param name="key">The key to access.</param>
            <returns>The color currently set for the specified key.</returns>
        </member>
        <member name="P:Colore.Implementations.KeyboardImplementation.Item(System.Int32,System.Int32)">
            <inheritdoc />
            <summary>
            Gets or sets the <see cref="T:Colore.Data.Color" /> for a specific row and column on the
            keyboard grid.
            </summary>
            <param name="row">Row to query, between 0 and <see cref="F:Colore.Effects.Keyboard.KeyboardConstants.MaxRows" /> (exclusive upper-bound).</param>
            <param name="column">Column to query, between 0 and <see cref="F:Colore.Effects.Keyboard.KeyboardConstants.MaxColumns" /> (exclusive upper-bound).</param>
            <returns>The color currently set on the specified position.</returns>
        </member>
        <member name="P:Colore.Implementations.KeyboardImplementation.Item(System.Int32)">
            <inheritdoc />
            <summary>
            Gets or sets the <see cref="T:Colore.Data.Color" /> for a specific Deathstalker zone.
            </summary>
            <param name="zoneIndex">Zone to query, between 0 and <see cref="F:Colore.Effects.Keyboard.KeyboardConstants.MaxDeathstalkerZones" /> (exclusive upper bound).</param>
            <returns>The color currently set for the specified zone.</returns>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.IsKeySafe(Colore.Effects.Keyboard.Key)">
            <summary>
            Returns whether the specified key is safe to use.
            </summary>
            <param name="key">The <see cref="T:Colore.Effects.Keyboard.Key" /> to test.</param>
            <returns><c>true</c> if the <see cref="T:Colore.Effects.Keyboard.Key" /> is safe, otherwise <c>false</c>.</returns>
            <remarks>
            A "safe" key means one that will always be visible if lit up,
            regardless of the physical layout of the keyboard.
            </remarks>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.IsPositionSafe(System.Int32,System.Int32)">
            <summary>
            Returns whether the specified position is safe to use.
            </summary>
            <param name="row">Row to query.</param>
            <param name="column">Column to query.</param>
            <returns><c>true</c> if the position is safe, otherwise false.</returns>
            <remarks>
            A "safe" positions means one that will always be visible of lit up,
            regardless of the physical layout of the keyboard.
            </remarks>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.IsSet(Colore.Effects.Keyboard.Key)">
            <inheritdoc />
            <summary>
            Returns whether a certain key has had a custom color set.
            </summary>
            <param name="key">Key to check.</param>
            <returns><c>true</c> if the key has a color set, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.SetAllAsync(Colore.Data.Color)">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.SetAllAsync(Colore.Data.Color)" />
            <summary>
            Sets the color of all keys on the keyboard.
            </summary>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.SetCustomAsync(Colore.Effects.Keyboard.CustomKeyboardEffect)">
            <inheritdoc />
            <summary>
            Sets a custom grid effect on the keyboard.
            </summary>
            <param name="effect">Effect options.</param>
            <remarks>
            This will overwrite the current internal <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" />
            struct in the <see cref="T:Colore.Implementations.KeyboardImplementation" /> class.
            </remarks>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.SetExtendedCustomAsync(Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect)">
            <inheritdoc />
            <summary>
            Sets an extended custom grid effect on the keyboard.
            </summary>
            <param name="effect">Effect options.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.SetEffectAsync(Colore.Effects.Keyboard.KeyboardEffectType)">
            <inheritdoc />
            <summary>
            Sets an effect without any parameters.
            Currently, this only works for the <see cref="F:Colore.Effects.Keyboard.KeyboardEffectType.None" /> effect.
            </summary>
            <param name="effectType">Effect options.</param>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.SetPositionAsync(System.Int32,System.Int32,Colore.Data.Color,System.Boolean)">
            <inheritdoc />
            <summary>
            Sets the color on a specific row and column on the keyboard grid.
            </summary>
            <param name="row">Row to set, between 0 and <see cref="F:Colore.Effects.Keyboard.KeyboardConstants.MaxRows" /> (exclusive upper-bound).</param>
            <param name="column">Column to set, between 0 and <see cref="F:Colore.Effects.Keyboard.KeyboardConstants.MaxColumns" /> (exclusive upper-bound).</param>
            <param name="color">Color to set.</param>
            <param name="clear">Whether or not to clear the existing colors before setting this one.</param>
            <exception cref="T:System.ArgumentException">Thrown if the row or column parameters are outside the valid ranges.</exception>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.SetKeyAsync(Colore.Effects.Keyboard.Key,Colore.Data.Color,System.Boolean)">
            <inheritdoc />
            <summary>
            Sets the color of a specific key on the keyboard.
            </summary>
            <param name="key">Key to modify.</param>
            <param name="color">Color to set.</param>
            <param name="clear">If true, the keyboard will first be cleared before setting the key.</param>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.SetKeysAsync(Colore.Data.Color,Colore.Effects.Keyboard.Key,Colore.Effects.Keyboard.Key[])">
            <inheritdoc />
            <summary>
            Sets the specified color on a set of keys.
            </summary>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to apply.</param>
            <param name="key">First key to change.</param>
            <param name="keys">Additional keys that should also have the color applied.</param>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.SetKeysAsync(System.Collections.Generic.IEnumerable{Colore.Effects.Keyboard.Key},Colore.Data.Color,System.Boolean)">
            <inheritdoc />
            <summary>
            Sets a color on a collection of keys.
            </summary>
            <param name="keys">The keys which should have their color changed.</param>
            <param name="color">The <see cref="T:Colore.Data.Color" /> to apply.</param>
            <param name="clear">
            If <c>true</c>, the keyboard keys will be cleared before
            applying the new colors.
            </param>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.SetStaticAsync(Colore.Effects.Keyboard.StaticKeyboardEffect)">
            <inheritdoc />
            <summary>
            Sets a static color on the keyboard.
            </summary>
            <param name="effect">Effect options.</param>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.SetDeathstalkerZoneAsync(System.Int32,Colore.Data.Color,System.Boolean)">
            <inheritdoc />
            <summary>
            Sets the specified Deathstalker zone to a color.
            </summary>
            <param name="zoneIndex">The index of the Deathstalker zone to set.</param>
            <param name="color">The color to set.</param>
            <param name="clear">Whether to clear all colors before setting the new one.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.SetDeathstalkerAsync(Colore.Effects.Keyboard.DeathstalkerGridEffect)">
            <inheritdoc />
            <summary>
            Sets a Deathstalker grid effect.
            </summary>
            <param name="effect">The Deathstalker grid effect to set.</param>
            <returns>A <see cref="T:System.Guid" /> for the effect that was set.</returns>
        </member>
        <member name="M:Colore.Implementations.KeyboardImplementation.ClearAsync">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.ClearAsync" />
            <summary>
            Clears the current effect on the Keyboard.
            </summary>
        </member>
        <member name="T:Colore.Implementations.KeypadImplementation">
            <inheritdoc cref="T:Colore.IKeypad" />
            <inheritdoc cref="T:Colore.Implementations.DeviceImplementation" />
            <summary>
            Class for interacting with a Chroma keypad.
            </summary>
        </member>
        <member name="F:Colore.Implementations.KeypadImplementation.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Implementations.KeypadImplementation._custom">
            <summary>
            Internal instance of a <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> struct used for
            the indexer.
            </summary>
        </member>
        <member name="M:Colore.Implementations.KeypadImplementation.#ctor(Colore.Api.IChromaApi)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Implementations.KeypadImplementation" /> class.
            </summary>
        </member>
        <member name="P:Colore.Implementations.KeypadImplementation.Item(System.Int32,System.Int32)">
            <inheritdoc />
            <summary>
            Gets or sets a color at the specified position in the keypad's
            grid layout.
            </summary>
            <param name="row">The row to access (between <c>0</c> and <see cref="F:Colore.Effects.Keypad.KeypadConstants.MaxRows" />, exclusive upper-bound).</param>
            <param name="column">The column to access (between <c>0</c> and <see cref="F:Colore.Effects.Keypad.KeypadConstants.MaxColumns" />, exclusive upper-bound).</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="M:Colore.Implementations.KeypadImplementation.IsSet(System.Int32,System.Int32)">
            <inheritdoc />
            <summary>
            Returns whether a key has had a custom color set.
            </summary>
            <param name="row">The row to query.</param>
            <param name="column">The column to query.</param>
            <returns><c>true</c> if the position has a color set that is not black, otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Colore.Implementations.KeypadImplementation.SetAllAsync(Colore.Data.Color)">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.SetAllAsync(Colore.Data.Color)" />
            <summary>
            Sets the color of all components on this device.
            </summary>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Colore.Implementations.KeypadImplementation.SetEffectAsync(Colore.Effects.Keypad.KeypadEffectType)">
            <inheritdoc />
            <summary>
            Sets an effect without any parameters.
            Currently, this only works for the <see cref="F:Colore.Effects.Keypad.KeypadEffectType.None" /> effect.
            </summary>
            <param name="effectType">Effect options.</param>
        </member>
        <member name="M:Colore.Implementations.KeypadImplementation.SetCustomAsync(Colore.Effects.Keypad.CustomKeypadEffect)">
            <inheritdoc />
            <summary>
            Sets a <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> effect on the keypad.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> struct.</param>
        </member>
        <member name="M:Colore.Implementations.KeypadImplementation.SetStaticAsync(Colore.Effects.Keypad.StaticKeypadEffect)">
            <inheritdoc />
            <summary>
            Sets a <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> effect on the keypad.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> struct.</param>
        </member>
        <member name="M:Colore.Implementations.KeypadImplementation.SetStaticAsync(Colore.Data.Color)">
            <inheritdoc />
            <summary>
            Sets a <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> effect on the keypad.
            </summary>
            <param name="color">Color of the effect.</param>
        </member>
        <member name="M:Colore.Implementations.KeypadImplementation.ClearAsync">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.ClearAsync" />
            <summary>
            Clears the current effect on the Keypad.
            </summary>
        </member>
        <member name="T:Colore.Implementations.MouseImplementation">
            <inheritdoc cref="T:Colore.IMouse" />
            <inheritdoc cref="T:Colore.Implementations.DeviceImplementation" />
            <summary>
            Class for interacting with a Chroma mouse.
            </summary>
        </member>
        <member name="F:Colore.Implementations.MouseImplementation.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Implementations.MouseImplementation._custom">
            <summary>
            Internal instance of a <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> struct.
            </summary>
        </member>
        <member name="M:Colore.Implementations.MouseImplementation.#ctor(Colore.Api.IChromaApi)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Implementations.MouseImplementation" /> class.
            </summary>
        </member>
        <member name="P:Colore.Implementations.MouseImplementation.Item(System.Int32,System.Int32)">
            <inheritdoc />
            <summary>
            Gets or sets the <see cref="T:Colore.Data.Color" /> for a specific position
            on the mouse's virtual grid.
            </summary>
            <param name="row">The row to query, between <c>0</c> and <see cref="F:Colore.Effects.Mouse.MouseConstants.MaxRows" /> (exclusive upper-bound).</param>
            <param name="column">The column to query, between <c>0</c> and <see cref="F:Colore.Effects.Mouse.MouseConstants.MaxColumns" /> (exclusive upper-bound).</param>
            <returns>The <see cref="T:Colore.Data.Color" /> at the specified position.</returns>
        </member>
        <member name="P:Colore.Implementations.MouseImplementation.Item(Colore.Effects.Mouse.GridLed)">
            <inheritdoc />
            <summary>
            Gets or sets the <see cref="T:Colore.Data.Color" /> for a specified <see cref="T:Colore.Effects.Mouse.GridLed" />
            on the mouse's virtual grid.
            </summary>
            <param name="led">The <see cref="T:Colore.Effects.Mouse.GridLed" /> to query.</param>
            <returns>The <see cref="T:Colore.Data.Color" /> currently set for the specified <see cref="T:Colore.Effects.Mouse.GridLed" />.</returns>
        </member>
        <member name="M:Colore.Implementations.MouseImplementation.SetEffectAsync(Colore.Effects.Mouse.MouseEffectType)">
            <inheritdoc />
            <summary>
            Sets an effect without any parameters.
            Currently, this only works for the <see cref="F:Colore.Effects.Mouse.MouseEffectType.None" /> effect.
            </summary>
            <param name="effectType">Effect options.</param>
        </member>
        <member name="M:Colore.Implementations.MouseImplementation.SetStaticAsync(Colore.Effects.Mouse.StaticMouseEffect)">
            <inheritdoc />
            <summary>
            Sets a static color on the mouse.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> effect.</param>
        </member>
        <member name="M:Colore.Implementations.MouseImplementation.SetStaticAsync(Colore.Data.Color,Colore.Effects.Mouse.Led)">
            <inheritdoc />
            <summary>
            Sets a static effect on the mouse.
            </summary>
            <param name="color">The color to use.</param>
            <param name="led">Which LED(s) to affect.</param>
        </member>
        <member name="M:Colore.Implementations.MouseImplementation.SetAllAsync(Colore.Data.Color)">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.SetAllAsync(Colore.Data.Color)" />
            <summary>
            Sets the color of all LEDs on the mouse.
            </summary>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Colore.Implementations.MouseImplementation.SetGridAsync(Colore.Effects.Mouse.CustomMouseEffect)">
            <inheritdoc />
            <summary>
            Sets a custom grid effect on the mouse.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> struct.</param>
        </member>
        <member name="M:Colore.Implementations.MouseImplementation.ClearAsync">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.ClearAsync" />
            <summary>
            Clears the current effect on the Mouse.
            </summary>
        </member>
        <member name="T:Colore.Implementations.MousepadImplementation">
            <inheritdoc cref="T:Colore.IMousepad" />
            <inheritdoc cref="T:Colore.Implementations.DeviceImplementation" />
            <summary>
            Class for interacting with a Chroma mouse pad.
            </summary>
        </member>
        <member name="F:Colore.Implementations.MousepadImplementation.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Implementations.MousepadImplementation._custom">
            <summary>
            Internal <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> struct used for effects.
            </summary>
        </member>
        <member name="M:Colore.Implementations.MousepadImplementation.#ctor(Colore.Api.IChromaApi)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Implementations.MousepadImplementation" /> class.
            </summary>
        </member>
        <member name="P:Colore.Implementations.MousepadImplementation.Item(System.Int32)">
            <inheritdoc />
            <summary>
            Gets or sets a specific LED on the mouse pad.
            </summary>
            <param name="index">The index to access.</param>
            <returns>The current <see cref="T:Colore.Data.Color" /> at the <paramref name="index" />.</returns>
        </member>
        <member name="M:Colore.Implementations.MousepadImplementation.SetAllAsync(Colore.Data.Color)">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.SetAllAsync(Colore.Data.Color)" />
            <summary>
            Sets the color of all components on this device.
            </summary>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Colore.Implementations.MousepadImplementation.SetEffectAsync(Colore.Effects.Mousepad.MousepadEffectType)">
            <inheritdoc />
            <summary>
            Sets an effect without any parameters.
            Currently, this only works for the <see cref="F:Colore.Effects.Mousepad.MousepadEffectType.None" /> effect.
            </summary>
            <param name="effectType">Effect options.</param>
        </member>
        <member name="M:Colore.Implementations.MousepadImplementation.SetStaticAsync(Colore.Effects.Mousepad.StaticMousepadEffect)">
            <inheritdoc />
            <summary>
            Sets a static color effect on the mouse pad.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Mousepad.StaticMousepadEffect" /> struct.</param>
        </member>
        <member name="M:Colore.Implementations.MousepadImplementation.SetStaticAsync(Colore.Data.Color)">
            <inheritdoc />
            <summary>
            Sets a static color effect on the mouse pad.
            </summary>
            <param name="color">Color to set.</param>
        </member>
        <member name="M:Colore.Implementations.MousepadImplementation.SetCustomAsync(Colore.Effects.Mousepad.CustomMousepadEffect)">
            <inheritdoc />
            <summary>
            Sets a custom effect on the mouse pad.
            </summary>
            <param name="effect">An instance of the <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> struct.</param>
        </member>
        <member name="M:Colore.Implementations.MousepadImplementation.ClearAsync">
            <inheritdoc cref="M:Colore.Implementations.DeviceImplementation.ClearAsync" />
            <summary>
            Clears the current effect on the Mousepad.
            </summary>
        </member>
        <member name="T:Colore.Logging.ILog">
            <summary>
            Simple interface that represent a logger.
            </summary>
        </member>
        <member name="M:Colore.Logging.ILog.Log(Colore.Logging.LogLevel,System.Func{System.String},System.Exception,System.Object[])">
             <summary>
             Log a message the specified log level.
             </summary>
             <param name="logLevel">The log level.</param>
             <param name="messageFunc">The message function.</param>
             <param name="exception">An optional exception.</param>
             <param name="formatParameters">Optional format parameters for the message generated by the messagefunc. </param>
             <returns>true if the message was logged. Otherwise false.</returns>
             <remarks>
             Note to implementers: the message func should not be called if the loglevel is not enabled
             so as not to incur performance penalties.
            
             To check IsEnabled call Log with only LogLevel and check the return value, no event will be written.
             </remarks>
        </member>
        <member name="T:Colore.Logging.LogLevel">
            <summary>
            The log level.
            </summary>
        </member>
        <member name="T:Colore.Logging.ILogProvider">
            <summary>
            Represents a way to get a <see cref="T:Colore.Logging.ILog"/>
            </summary>
        </member>
        <member name="M:Colore.Logging.ILogProvider.GetLogger(System.String)">
            <summary>
            Gets the specified named logger.
            </summary>
            <param name="name">Name of the logger.</param>
            <returns>The logger reference.</returns>
        </member>
        <member name="M:Colore.Logging.ILogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="message">The message to add to the diagnostics context.</param>
            <returns>A disposable that when disposed removes the message from the context.</returns>
        </member>
        <member name="M:Colore.Logging.ILogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context. Not supported in EntLib logging.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Destructure context.</param>
            <returns>A disposable that when disposed removes the map from the context.</returns>
        </member>
        <member name="T:Colore.Logging.LogProvider">
            <summary>
            Provides a mechanism to create instances of <see cref="T:Colore.Logging.ILog" /> objects.
            </summary>
        </member>
        <member name="M:Colore.Logging.LogProvider.SetCurrentLogProvider(Colore.Logging.ILogProvider)">
            <summary>
            Sets the current log provider.
            </summary>
            <param name="logProvider">The log provider.</param>
        </member>
        <member name="P:Colore.Logging.LogProvider.IsDisabled">
            <summary>
            Gets or sets a value indicating whether this is logging is disabled.
            </summary>
            <value>
            <c>true</c> if logging is disabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Colore.Logging.LogProvider.OnCurrentLogProviderSet">
            <summary>
            Sets an action that is invoked when a consumer of your library has called SetCurrentLogProvider. It is
            important that hook into this if you are using child libraries (especially ilmerged ones) that are using
            LibLog (or other logging abstraction) so you adapt and delegate to them.
            <see cref="M:Colore.Logging.LogProvider.SetCurrentLogProvider(Colore.Logging.ILogProvider)"/>
            </summary>
        </member>
        <member name="M:Colore.Logging.LogProvider.For``1">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <typeparam name="T">The type whose name will be used for the logger.</typeparam>
            <returns>An instance of <see cref="T:Colore.Logging.ILog"/></returns>
        </member>
        <member name="M:Colore.Logging.LogProvider.GetLogger(System.Type,System.String)">
            <summary>
            Gets a logger for the specified type.
            </summary>
            <param name="type">The type whose name will be used for the logger.</param>
            <param name="fallbackTypeName">If the type is null then this name will be used as the log name instead</param>
            <returns>An instance of <see cref="T:Colore.Logging.ILog"/></returns>
        </member>
        <member name="M:Colore.Logging.LogProvider.GetLogger(System.String)">
            <summary>
            Gets a logger with the specified name.
            </summary>
            <param name="name">The name.</param>
            <returns>An instance of <see cref="T:Colore.Logging.ILog"/></returns>
        </member>
        <member name="M:Colore.Logging.LogProvider.OpenNestedContext(System.String)">
            <summary>
            Opens a nested diagnostics context.
            </summary>
            <param name="message">A message.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="M:Colore.Logging.LogProvider.OpenMappedContext(System.String,System.Object,System.Boolean)">
            <summary>
            Opens a mapped diagnostics context.
            </summary>
            <param name="key">A key.</param>
            <param name="value">A value.</param>
            <param name="destructure">Destructure context.</param>
            <returns>An <see cref="T:System.IDisposable"/> that closes context when disposed.</returns>
        </member>
        <member name="T:Colore.Logging.LogProviders.LoupeLogProvider.WriteDelegate">
            <summary>
            The form of the Loupe Log.Write method we're using
            </summary>
        </member>
        <member name="P:Colore.Logging.LogProviders.LoupeLogProvider.ProviderIsAvailableOverride">
            <summary>
            Gets or sets a value indicating whether [provider is available override]. Used in tests.
            </summary>
            <value>
            <c>true</c> if [provider is available override]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Colore.Logging.LogProviders.LogMessageFormatter.SimulateStructuredLogging(System.Func{System.String},System.Object[])">
             <summary>
             Some logging frameworks support structured logging, such as serilog. This will allow you to add names to structured data in a format string:
             For example: Log("Log message to {user}", user). This only works with serilog, but as the user of LibLog, you don't know if serilog is actually
             used. So, this class simulates that. it will replace any text in {curly braces} with an index number.
            
             "Log {message} to {user}" would turn into => "Log {0} to {1}". Then the format parameters are handled using regular .net string.Format.
             </summary>
             <param name="messageBuilder">The message builder.</param>
             <param name="formatParameters">The format parameters.</param>
             <returns></returns>
        </member>
        <member name="T:Colore.Native.INativeSdkMethods">
            <summary>
            Interface for a class providing access to native Chroma SDK methods.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.Init">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.InitDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.UnInit">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.UnInitDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.CreateEffect">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.CreateKeyboardEffect">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateKeyboardEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.CreateMouseEffect">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateMouseEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.CreateHeadsetEffect">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateHeadsetEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.CreateMousepadEffect">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateMousepadEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.CreateKeypadEffect">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateKeypadEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.CreateChromaLinkEffect">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateChromaLinkEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.DeleteEffect">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.DeleteEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.SetEffect">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.SetEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.RegisterEventNotification">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.RegisterEventNotificationDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.UnregisterEventNotification">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.UnregisterEventNotificationDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.INativeSdkMethods.QueryDevice">
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.QueryDeviceDelegate" />.
            </summary>
        </member>
        <member name="T:Colore.Native.Kernel32.NativeMethods">
            <summary>
            Native methods from <c>kernel32</c> module.
            </summary>
        </member>
        <member name="F:Colore.Native.Kernel32.NativeMethods.DllName">
            <summary>
            Name of the DLL from which functions are imported.
            </summary>
        </member>
        <member name="M:Colore.Native.Kernel32.NativeMethods.GetProcAddress(System.IntPtr,System.String)">
            <summary>
            Retrieves the address of an exported function or variable from the specified dynamic-link library (DLL).
            </summary>
            <param name="module">
            A handle to the DLL module that contains the function or variable.
            The <c>LoadLibrary</c>, <c>LoadLibraryEx</c>, <c>LoadPackagedLibrary</c>, or <c>GetModuleHandle</c> function returns this handle.
            The <c>GetProcAddress</c> function does not retrieve addresses from modules that were loaded using the <c>LOAD_LIBRARY_AS_DATAFILE</c> flag.
            For more information, see <c>LoadLibraryEx</c>.
            </param>
            <param name="procName">
            The function or variable name, or the function's ordinal value. If this parameter is an ordinal value, it must be in the low-order word; the high-order word must be zero.
            </param>
            <returns>
            If the function succeeds, the return value is the address of the exported function or variable.
            If the function fails, the return value is <c>NULL</c>.To get extended error information, call <c>GetLastError</c>.
            </returns>
            <remarks>
            The spelling and case of a function name pointed to by <c>lpProcName</c> must be identical to that in the
            <c>EXPORTS</c> statement of the source DLL's module-definition (<c>.def</c>) file. The exported names of
            functions may differ from the names you use when calling these functions in your code. This difference is
            hidden by macros used in the SDK header files. For more information, see Conventions for Function Prototypes.
            <para>
            The <c>lpProcName</c> parameter can identify the DLL function by specifying an ordinal value associated with
            the function in the <c>EXPORTS</c> statement. <c>GetProcAddress</c> verifies that the specified ordinal is in
            the range 1 through the highest ordinal value exported in the <c>.def</c> file. The function then uses the ordinal
            as an index to read the function's address from a function table.
            </para>
            <para>
            If the <c>.def</c> file does not number the functions consecutively from <c>1</c> to <c>N</c> (where <c>N</c> is
            the number of exported functions), an error can occur where <c>GetProcAddress</c> returns an invalid,
            non-<c>NULL</c> address, even though there is no function with the specified ordinal.
            </para>
            <para>
            If the function might not exist in the DLL module - for example, if the function is available only on
            Windows Vista but the application might be running on Windows XP - specify the function by name rather
            than by ordinal value and design your application to handle the case when the function is not available.
            </para>
            </remarks>
        </member>
        <member name="M:Colore.Native.Kernel32.NativeMethods.LoadLibrary(System.String)">
            <summary>
            Loads the specified module into the address space of the calling process. The specified module may cause other modules to be loaded.
            </summary>
            <param name="filename">
            The name of the module. This can be either a library module (a <c>.dll</c> file) or an executable module (an <c>.exe</c> file).
            The name specified is the file name of the module and is not related to the name stored in the library module itself,
            as specified by the <c>LIBRARY</c> keyword in the module-definition (<c>.def</c>) file.
            <para>
            If the string specifies a full path, the function searches only that path for the module.
            </para>
            <para>
            If the string specifies a relative path or a module name without a path, the function uses a standard search strategy
            to find the module; for more information, see the Remarks.
            </para>
            <para>
            If the function cannot find the module, the function fails. When specifying a path, be sure to use backslashes (<c>\</c>),
            not forward slashes (<c>/</c>). For more information about paths, see Naming a File or Directory.
            </para>
            <para>
            If the string specifies a module name without a path and the file name extension is omitted, the function appends the
            default library extension <c>.dll</c> to the module name. To prevent the function from appending <c>.dll</c> to the module name,
            include a trailing point character (<c>.</c>) in the module name string.
            </para>
            </param>
            <returns>
            If the function succeeds, the return value is a handle to the module.
            <para>If the function fails, the return value is <c>NULL</c>.To get extended error information, call <c>GetLastError</c>.</para>
            </returns>
            <remarks>
            To enable or disable error messages displayed by the loader during DLL loads, use the <c>SetErrorMode</c> function.
            <para>
            <c>LoadLibrary</c> can be used to load a library module into the address space of the process and return a handle
            that can be used in <c>GetProcAddress</c> to get the address of a DLL function. <c>LoadLibrary</c> can also be used
            to load other executable modules. For example, the function can specify an .exe file to get a handle that can be used
            in <c>FindResource</c> or <c>LoadResource</c>. However, do not use <c>LoadLibrary</c> to run an .exe file. Instead,
            use the <c>CreateProcess</c> function.
            </para>
            <para>
            If the specified module is a DLL that is not already loaded for the calling process, the system calls the DLL's
            <c>DllMain</c> function with the <c>DLL_PROCESS_ATTACH</c> value. If <c>DllMain</c> returns <c>TRUE</c>,
            <c>LoadLibrary</c> returns a handle to the module. If <c>DllMain</c> returns <c>FALSE</c>, the system unloads
            the DLL from the process address space and <c>LoadLibrary</c> returns <c>NULL</c>. It is not safe to call
            <c>LoadLibrary</c> from <c>DllMain</c>. For more information, see the Remarks section in <c>DllMain</c>.
            </para>
            <para>
            Module handles are not global or inheritable. A call to <c>LoadLibrary</c> by one process does not produce a handle
            that another process can use — for example, in calling <c>GetProcAddress</c>. The other process must make its own call
            to <c>LoadLibrary</c> for the module before calling <c>GetProcAddress</c>.
            </para>
            <para>
            If lp<c>FileName</c> does not include a path and there is more than one loaded module with the same base name and
            extension, the function returns a handle to the module that was loaded first.
            </para>
            <para>
            If no file name extension is specified in the lp<c>FileName</c> parameter, the default library extension .dll is
            appended. However, the file name string can include a trailing point character (.) to indicate that the module name
            has no extension. When no path is specified, the function searches for loaded modules whose base name matches the
            base name of the module to be loaded. If the name matches, the load succeeds. Otherwise, the function searches
            for the file.
            </para>
            <para>
            The first directory searched is the directory containing the image file used to create the calling process
            (for more information, see the <c>CreateProcess</c> function). Doing this allows private dynamic-link library (DLL)
            files associated with a process to be found without adding the process's installed directory to the <c>PATH</c>
            environment variable. If a relative path is specified, the entire relative path is appended to every token in the
            DLL search path list. To load a module from a relative path without searching any other path, use <c>GetFullPathName</c>
            to get a nonrelative path and call <c>LoadLibrary</c> with the nonrelative path. For more information on the DLL search
            order, see Dynamic-Link Library Search Order.
            </para>
            <para>
            The search path can be altered using the <c>SetDllDirectory</c> function. This solution is recommended instead of using
            <c>SetCurrentDirectory</c> or hard-coding the full path to the DLL.
            </para>
            <para>
            If a path is specified and there is a redirection file for the application, the function searches for the module in the
            application's directory. If the module exists in the application's directory, <c>LoadLibrary</c> ignores the specified
            path and loads the module from the application's directory. If the module does not exist in the application's directory,
            <c>LoadLibrary</c> loads the module from the specified directory. For more information,
            see Dynamic Link Library Redirection.
            </para>
            <para>
            If you call <c>LoadLibrary</c> with the name of an assembly without a path specification and the assembly is listed
            in the system compatible manifest, the call is automatically redirected to the side-by-side assembly.
            </para>
            <para>
            The system maintains a per-process reference count on all loaded modules. Calling <c>LoadLibrary</c> increments the
            reference count. Calling the <c>FreeLibrary</c> or <c>FreeLibraryAndExitThread</c> function decrements the reference
            count. The system unloads a module when its reference count reaches zero or when the process terminates (regardless
            of the reference count).
            </para>
            <para>
            Windows Server 2003 and Windows XP:  The Visual C++ compiler supports a syntax that enables you to declare thread-local
            variables: <c>_declspec(thread)</c>. If you use this syntax in a DLL, you will not be able to load the DLL explicitly
            using <c>LoadLibrary</c> on versions of Windows prior to Windows Vista. If your DLL will be loaded explicitly,
            you must use the thread local storage functions instead of <c>_declspec(thread)</c>. For an example, see Using
            Thread Local Storage in a Dynamic Link Library.
            </para>
            <para>
            Do not use the <c>SearchPath</c> function to retrieve a path to a DLL for a subsequent <c>LoadLibrary</c> call.
            The <c>SearchPath</c> function uses a different search order than <c>LoadLibrary</c> and it does not use safe process
            search mode unless this is explicitly enabled by calling <c>SetSearchPathMode</c> with
            <c>BASE_SEARCH_PATH_ENABLE_SAFE_SEARCHMODE</c>. Therefore, <c>SearchPath</c> is likely to first search the user’s
            current working directory for the specified DLL. If an attacker has copied a malicious version of a DLL into the
            current working directory, the path retrieved by <c>SearchPath</c> will point to the malicious DLL, which
            <c>LoadLibrary</c> will then load.
            </para>
            <para>
            Do not make assumptions about the operating system version based on a <c>LoadLibrary</c> call that searches for a DLL.
            If the application is running in an environment where the DLL is legitimately not present but a malicious version of
            the DLL is in the search path, the malicious version of the DLL may be loaded. Instead, use the recommended techniques
            described in Getting the System Version.
            </para>
            </remarks>
        </member>
        <member name="M:Colore.Native.Kernel32.NativeMethods.FreeLibrary(System.IntPtr)">
            <summary>
            Frees the loaded dynamic-link library (DLL) module and, if necessary, decrements its reference count.
            When the reference count reaches zero, the module is unloaded from the address space of the calling
            process and the handle is no longer valid.
            </summary>
            <param name="hModule">
            A handle to the loaded library module. The <see cref="M:Colore.Native.Kernel32.NativeMethods.LoadLibrary(System.String)" />, <c>LoadLibraryEx</c>,
            <c>GetModuleHandle</c>, or <c>GetModuleHandleEx</c> function returns this handle.
            </param>
            <returns>
            If the function succeeds, the return value is <c>true</c>.
            <para>
            If the function fails, the return value is <c>false</c>.
            To get extended error information, call the <c>GetLastError</c> function.
            </para>
            </returns>
            <remarks>
            <para>
            The system maintains a per-process reference count for each loaded module.
            A module that was loaded at process initialization due to load-time dynamic linking
            has a reference count of one. The reference count for a module is incremented each time the module
            is loaded by a call to <see cref="M:Colore.Native.Kernel32.NativeMethods.LoadLibrary(System.String)" />. The reference count is also incremented
            by a call to <c>LoadLibraryEx</c> unless the module is being loaded for the first time and
            is being loaded as a data or image file.
            </para>
            <para>
            The reference count is decremented each time the <see cref="M:Colore.Native.Kernel32.NativeMethods.FreeLibrary(System.IntPtr)" /> or
            <c>FreeLibraryAndExitThread</c> function is called for the module.
            When a module's reference count reaches zero or the process terminates, the system unloads the module
            from the address space of the process.
            Before unloading a library module, the system enables the module to detach from the process
            by calling the module's <c>DllMain</c> function, if it has one, with the <c>DLL_PROCESS_DETACH</c> value.
            Doing so gives the library module an opportunity to clean up resources allocated on behalf of
            the current process.
            After the entry-point function returns, the library module is removed from the address space of
            the current process.
            </para>
            <para>
            It is not safe to call <see cref="M:Colore.Native.Kernel32.NativeMethods.FreeLibrary(System.IntPtr)" /> from <c>DllMain</c>.
            For more information, see the Remarks section in <c>DllMain</c>.
            </para>
            <para>
            Calling <see cref="M:Colore.Native.Kernel32.NativeMethods.FreeLibrary(System.IntPtr)" /> does not affect other processes that are using the same module.
            </para>
            <para>
            Use caution when calling <see cref="M:Colore.Native.Kernel32.NativeMethods.FreeLibrary(System.IntPtr)" /> with a handle returned by <c>GetModuleHandle</c>.
            The <c>GetModuleHandle</c> function does not increment a module's reference count,
            so passing this handle to <see cref="M:Colore.Native.Kernel32.NativeMethods.FreeLibrary(System.IntPtr)" /> can cause a module to be unloaded prematurely.
            </para>
            <para>
            A thread that must unload the DLL in which it is executing and then terminate itself
            should call <c>FreeLibraryAndExitThread</c> instead of calling <see cref="M:Colore.Native.Kernel32.NativeMethods.FreeLibrary(System.IntPtr)" />
            and <c>ExitThread</c> separately.
            Otherwise, a race condition can occur.
            For details, see the Remarks section of <c>FreeLibraryAndExitThread</c>.
            </para>
            </remarks>
        </member>
        <member name="T:Colore.Native.NativeApi">
            <inheritdoc />
            <summary>
            Helper class to more easily make calls to native Chroma SDK functions.
            </summary>
        </member>
        <member name="F:Colore.Native.NativeApi.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Native.NativeApi._nativeSdkMethods">
            <summary>
            A reference to an instance of <see cref="T:Colore.Native.NativeSdkMethods" /> providing access to native Chroma SDK functions.
            </summary>
        </member>
        <member name="M:Colore.Native.NativeApi.#ctor(Colore.Native.INativeSdkMethods)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Native.NativeApi" /> class.
            </summary>
            <param name="nativeSdkMethods">
            The instance of <see cref="T:Colore.Native.NativeSdkMethods" /> to use
            for accessing the Chroma SDK functions.
            If <c>null</c>, a default implementation will be used.
            </param>
        </member>
        <member name="M:Colore.Native.NativeApi.InitializeAsync(Colore.Data.AppInfo)">
            <inheritdoc />
            <summary>
            Initializes the Chroma SDK.
            </summary>
            <param name="info">Information about the application, currently unused for native SDK.</param>
        </member>
        <member name="M:Colore.Native.NativeApi.UninitializeAsync">
            <inheritdoc />
            <summary>
            Uninitializes the Chroma SDK.
            </summary>
        </member>
        <member name="M:Colore.Native.NativeApi.QueryDeviceAsync(System.Guid)">
            <inheritdoc />
            <summary>
            Query for device information.
            </summary>
            <param name="deviceId">Device ID, found in <see cref="T:Colore.Data.Devices" />.</param>
            <returns>A populated <see cref="T:Colore.Data.SdkDeviceInfo" /> structure with information about the requested device.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.SetEffectAsync(System.Guid)">
            <inheritdoc />
            <summary>
            Set effect.
            </summary>
            <param name="effectId">Effect ID to set.</param>
        </member>
        <member name="M:Colore.Native.NativeApi.DeleteEffectAsync(System.Guid)">
            <inheritdoc />
            <summary>
            Deletes an effect with the specified <see cref="T:System.Guid" />.
            </summary>
            <param name="effectId">Effect ID to delete.</param>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateDeviceEffectAsync(System.Guid,Colore.Effects.Generic.EffectType)">
            <inheritdoc />
            <summary>
            Creates a new device effect without any effect data.
            </summary>
            <param name="deviceId">The ID of the device to create the effect for.</param>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateDeviceEffectAsync``1(System.Guid,Colore.Effects.Generic.EffectType,``0)">
            <inheritdoc />
            <summary>
            Helper method for creating device effects with relevant structure parameter.
            </summary>
            <typeparam name="T">The structure type, needs to be compatible with the effect type.</typeparam>
            <param name="deviceId">The ID of the device to create the effect for.</param>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">The effect structure parameter.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateKeyboardEffectAsync(Colore.Effects.Keyboard.KeyboardEffectType)">
            <inheritdoc />
            <summary>
            Creates a new keyboard effect without any effect data.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateKeyboardEffectAsync``1(Colore.Effects.Keyboard.KeyboardEffectType,``0)">
            <inheritdoc />
            <summary>
            Helper method for creating keyboard effects with relevant structure parameter.
            </summary>
            <typeparam name="T">The structure type, needs to be compatible with the effect type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">The effect structure parameter.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateMouseEffectAsync(Colore.Effects.Mouse.MouseEffectType)">
            <inheritdoc />
            <summary>
            Creates a new mouse effect without any effect data.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateMouseEffectAsync``1(Colore.Effects.Mouse.MouseEffectType,``0)">
            <inheritdoc />
            <summary>
            Helper method for creating mouse effects with parameter struct.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateHeadsetEffectAsync(Colore.Effects.Headset.HeadsetEffectType)">
            <inheritdoc />
            <summary>
            Creates a new headset effect without any effect data.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateHeadsetEffectAsync``1(Colore.Effects.Headset.HeadsetEffectType,``0)">
            <inheritdoc />
            <summary>
            Helper method for creating headset effects with parameter struct.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateMousepadEffectAsync(Colore.Effects.Mousepad.MousepadEffectType)">
            <inheritdoc />
            <summary>
            Creates a new mousepad effect without any effect data.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateMousepadEffectAsync``1(Colore.Effects.Mousepad.MousepadEffectType,``0)">
            <inheritdoc />
            <summary>
            Helper method for creating mouse pad effects with parameter struct.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateKeypadEffectAsync(Colore.Effects.Keypad.KeypadEffectType)">
            <inheritdoc />
            <summary>
            Creates a new keypad effect without any effect data.
            </summary>
            <param name="effectType">THe type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateKeypadEffectAsync``1(Colore.Effects.Keypad.KeypadEffectType,``0)">
            <inheritdoc />
            <summary>
            Helper method for creating keypad effects with parameter struct.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateChromaLinkEffectAsync(Colore.Effects.ChromaLink.ChromaLinkEffectType)">
            <inheritdoc />
            <summary>
            Creates a new Chroma Link effect without any effect data.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateChromaLinkEffectAsync``1(Colore.Effects.ChromaLink.ChromaLinkEffectType,``0)">
            <inheritdoc />
            <summary>
            Helper method for creating Chroma Link effects with parameter struct.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.RegisterEventNotifications(System.IntPtr)">
            <inheritdoc />
            <summary>
            Registers for Chroma SDK notifications.
            </summary>
            <param name="hwnd">App handle for the window handling events.</param>
        </member>
        <member name="M:Colore.Native.NativeApi.UnregisterEventNotifications">
            <inheritdoc />
            <summary>
            Unregisters from receiving Chroma SDK notifications.
            </summary>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateEffect(System.Guid,Colore.Effects.Generic.EffectType,System.IntPtr)">
            <summary>
            Creates an effect for a device.
            </summary>
            <param name="device">The device to create the effect on.</param>
            <param name="effectType">The type of effect to create.</param>
            <param name="param">Effect-specific parameter.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
            <seealso cref="P:Colore.Native.NativeSdkMethods.CreateEffect" />
        </member>
        <member name="M:Colore.Native.NativeApi.CreateKeyboardEffect(Colore.Effects.Keyboard.KeyboardEffectType,System.IntPtr)">
            <summary>
            Create keyboard effect.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <param name="param">Context-sensitive effect parameter.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
            <seealso cref="P:Colore.Native.NativeSdkMethods.CreateKeyboardEffect" />
        </member>
        <member name="M:Colore.Native.NativeApi.CreateMouseEffect(Colore.Effects.Mouse.MouseEffectType,System.IntPtr)">
            <summary>
            Creates a standard mouse effect with the specified parameters.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <param name="param">Context-sensitive effect parameter.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
            <seealso cref="P:Colore.Native.NativeSdkMethods.CreateMouseEffect" />
        </member>
        <member name="M:Colore.Native.NativeApi.CreateHeadsetEffect(Colore.Effects.Headset.HeadsetEffectType,System.IntPtr)">
            <summary>
            Creates a standard headset effect with the specified parameters.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <param name="param">Effect-specific parameter.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateMousepadEffect(Colore.Effects.Mousepad.MousepadEffectType,System.IntPtr)">
            <summary>
            Creates a standard mouse pad effect with the specified parameters.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <param name="param">Effect-specific parameter.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateKeypadEffect(Colore.Effects.Keypad.KeypadEffectType,System.IntPtr)">
            <summary>
            Creates a standard keypad effect with the specified parameters.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <param name="param">Effect-specific parameters.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Native.NativeApi.CreateChromaLinkEffect(Colore.Effects.ChromaLink.ChromaLinkEffectType,System.IntPtr)">
            <summary>
            Creates a Chroma Link effect with the specified parameters.
            </summary>
            <param name="effectType">The type of Chroma Link effect to create.</param>
            <param name="param">Effect-specific parameters.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="T:Colore.Native.NativeCallException">
            <inheritdoc />
            <summary>
            Thrown when a native function returns an erroneous result value.
            </summary>
        </member>
        <member name="F:Colore.Native.NativeCallException.MessageTemplate">
            <summary>
            Template used to construct exception message from.
            </summary>
        </member>
        <member name="M:Colore.Native.NativeCallException.#ctor(System.String,Colore.Data.Result)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Native.NativeCallException" /> class.
            </summary>
            <param name="function">The name of the function that was called.</param>
            <param name="result">The result returned from the called function.</param>
        </member>
        <member name="P:Colore.Native.NativeCallException.Function">
            <summary>
            Gets the name of the native function that was called.
            </summary>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods">
            <inheritdoc cref="T:Colore.Native.INativeSdkMethods" />
            <summary>
            Native methods from Razer's Chroma SDK.
            </summary>
        </member>
        <member name="F:Colore.Native.NativeSdkMethods.FunctionConvention">
            <summary>
            Calling convention for API functions.
            </summary>
        </member>
        <member name="F:Colore.Native.NativeSdkMethods.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Native.NativeSdkMethods._chromaSdkPointer">
            <summary>
            Holds the pointer to the native Chroma SDK library.
            </summary>
        </member>
        <member name="M:Colore.Native.NativeSdkMethods.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Native.NativeSdkMethods" /> class.
            </summary>
        </member>
        <member name="M:Colore.Native.NativeSdkMethods.Finalize">
            <summary>
            Finalizes an instance of the <see cref="T:Colore.Native.NativeSdkMethods" /> class.
            </summary>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.InitDelegate">
            <summary>
            Initialize Chroma SDK.
            </summary>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.UnInitDelegate">
            <summary>
            Uninitialize Chroma SDK.
            </summary>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.CreateEffectDelegate">
            <summary>
            Creates an effect for a device.
            </summary>
            <param name="deviceId">The <see cref="T:System.Guid" /> of the device, refer to <see cref="T:Colore.Data.Devices" /> for supported IDs.</param>
            <param name="effectType">The effect to create.</param>
            <param name="param">Effect-specific parameter.</param>
            <param name="effectId">Valid effect ID if successful. Use <see cref="F:System.Guid.Empty" /> if not required.</param>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.CreateKeyboardEffectDelegate">
            <summary>
            Create keyboard effect.
            </summary>
            <param name="effectType">
            Standard effect type, like <see cref="F:Colore.Effects.Keyboard.KeyboardEffectType.Static" />.
            </param>
            <param name="param">Pointer to a parameter type specified by <paramref name="effectType" />.</param>
            <param name="effectId">Valid effect ID if successful. Use <see cref="F:System.Guid.Empty" /> if not required.</param>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
            <remarks>
            The <paramref name="param" /> parameter should point to the relevant struct for the passed in effect,
            according to the following list.
            <list type="table">
            <listheader>
            <term>Effect type</term>
            <term>Effect struct</term>
            </listheader>
            <item>
            <term><see cref="F:Colore.Effects.Keyboard.KeyboardEffectType.Static" /></term>
            <term><see cref="T:Colore.Effects.Keyboard.StaticKeyboardEffect" /></term>
            </item>
            <item>
            <term><see cref="F:Colore.Effects.Keyboard.KeyboardEffectType.CustomKey" /></term>
            <term><see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /></term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.CreateMouseEffectDelegate">
            <summary>
            Create mouse effect.
            </summary>
            <param name="effectType">
            Standard effect type, like <see cref="F:Colore.Effects.Mouse.MouseEffectType.Static" />.
            Depends on which LED.
            </param>
            <param name="param">Pointer to a parameter type specified by <paramref name="effectType" />.</param>
            <param name="effectId">Set to valid effect ID if successful. Pass <see cref="F:System.IntPtr.Zero" /> if not required.</param>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
            <remarks>
            The <paramref name="param" /> parameter should point to the relevant struct for the passed in effect,
            according to the following list.
            <list type="table">
            <listheader>
            <term>Effect type</term>
            <term>Effect struct</term>
            </listheader>
            <item>
            <term><see cref="F:Colore.Effects.Mouse.MouseEffectType.Static" /></term>
            <term><see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /></term>
            </item>
            <item>
            <term><see cref="F:Colore.Effects.Mouse.MouseEffectType.Custom" /></term>
            <term><see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /></term>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.CreateHeadsetEffectDelegate">
            <summary>
            Create headset effect.
            </summary>
            <param name="effectType">Standard effect type.</param>
            <param name="param">Pointer to a parameter type specified by <paramref name="effectType" />.</param>
            <param name="effectId">Set to valid effect ID if successful. Pass <see cref="F:System.IntPtr.Zero" /> if not required.</param>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.CreateMousepadEffectDelegate">
            <summary>
            Create mousepad effect.
            </summary>
            <param name="effectType">Mousemat effect type.</param>
            <param name="param">Pointer to a parameter specified by <paramref name="effectType" />.</param>
            <param name="effectId">Valid effect ID if successful. Pass <see cref="F:System.IntPtr.Zero" /> if not required.</param>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.CreateKeypadEffectDelegate">
            <summary>
            Create keypad effect.
            </summary>
            <param name="effectType">Keypad effect type.</param>
            <param name="param">Pointer to a parameter type specified by <paramref name="effectType" />.</param>
            <param name="effectId">Valid effect ID if successful. Pass <see cref="F:System.IntPtr.Zero" /> if not required.</param>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.CreateChromaLinkEffectDelegate">
            <summary>
            Create Chroma Link effect.
            </summary>
            <param name="effectType">Chroma Link effect type.</param>
            <param name="param">Pointer to a parameter type specified by <paramref name="effectType" />.</param>
            <param name="effectId">Valid effect ID if successful. Pass <see cref="F:System.IntPtr.Zero" /> if not required.</param>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.DeleteEffectDelegate">
            <summary>
            Delete effect.
            </summary>
            <param name="effectId">ID of the effect that needs to be deleted.</param>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.SetEffectDelegate">
            <summary>
            Set effect.
            </summary>
            <param name="effectId">ID of the effect that needs to be set.</param>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.RegisterEventNotificationDelegate">
            <summary>
            Register for event notification.
            </summary>
            <param name="hwnd">Application window handle.</param>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
            <remarks>
            <strong>Messages can only be handled in a Windows message pumping thread.</strong>
            <see cref="F:Colore.Data.Constants.WmChromaEvent" /> will be sent if there is an event.
            Possible combination of <c>wParam</c> and <c>lParam</c> values are explained in the below table.
            <list type="table">
            <listheader>
            <term><c>wParam</c> value</term>
            <term><c>lParam</c>l value</term>
            <term>Meaning</term>
            </listheader>
            <item>
            <term>1</term>
            <term>1</term>
            <term>Chroma SDK support enabled</term>
            </item>
            <item>
            <term>1</term>
            <term>0</term>
            <term>Chroma SDK support disabled</term>
            </item>
            <item>
            <term>2</term>
            <term>1</term>
            <term>Access to device granted</term>
            </item>
            <item>
            <term>2</term>
            <term>0</term>
            <term>Access to device revoked</term>
            </item>
            <item>
            <term>3</term>
            <term>1</term>
            <term>Application state enabled</term>
            </item>
            <item>
            <term>3</term>
            <term>0</term>
            <item>Application state disabled</item>
            </item>
            </list>
            </remarks>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.UnregisterEventNotificationDelegate">
            <summary>
            Unregister for event notification.
            </summary>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
        </member>
        <member name="T:Colore.Native.NativeSdkMethods.QueryDeviceDelegate">
            <summary>
            Query for device information.
            </summary>
            <param name="deviceId">Device ID, found in <see cref="T:Colore.Data.Devices" />.</param>
            <param name="info">Will contain device information for the device specified by <paramref name="deviceId" />.</param>
            <returns><see cref="T:Colore.Data.Result" /> value indicating success.</returns>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.Init">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.InitDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.UnInit">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.UnInitDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.CreateEffect">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.CreateKeyboardEffect">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateKeyboardEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.CreateMouseEffect">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateMouseEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.CreateHeadsetEffect">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateHeadsetEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.CreateMousepadEffect">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateMousepadEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.CreateKeypadEffect">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateKeypadEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.CreateChromaLinkEffect">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.CreateChromaLinkEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.DeleteEffect">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.DeleteEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.SetEffect">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.SetEffectDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.RegisterEventNotification">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.RegisterEventNotificationDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.UnregisterEventNotification">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.UnregisterEventNotificationDelegate" />.
            </summary>
        </member>
        <member name="P:Colore.Native.NativeSdkMethods.QueryDevice">
            <inheritdoc />
            <summary>
            Gets a reference to the loaded <see cref="T:Colore.Native.NativeSdkMethods.QueryDeviceDelegate" />.
            </summary>
        </member>
        <member name="M:Colore.Native.NativeSdkMethods.Dispose">
            <inheritdoc />
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Colore.Native.NativeSdkMethods.GetDelegateFromLibrary``1(System.IntPtr,System.String)">
            <summary>
            Gets a delegate with a specified name from a dynamically loaded library.
            </summary>
            <typeparam name="T">The type of delegate to get.</typeparam>
            <param name="lib">A pointer to the loaded library to load the function from.</param>
            <param name="name">Name of the function to load.</param>
            <returns>A delegate of type <typeparamref name="T" /> for the specified function.</returns>
        </member>
        <member name="M:Colore.Native.NativeSdkMethods.Dispose(System.Boolean)">
            <summary>
            Disposes resources used by this class.
            </summary>
            <param name="disposing">
            <c>true</c> if calling from <see cref="M:Colore.Native.NativeSdkMethods.Dispose" />,
            <c>false</c> if calling from the finalizer.
            </param>
        </member>
        <member name="M:Colore.Native.NativeSdkMethods.ReleaseUnmanagedResources">
            <summary>
            Releases unmanaged resources.
            </summary>
            <remarks>Calls <see cref="M:Colore.Native.Kernel32.NativeMethods.FreeLibrary(System.IntPtr)" /> on the Chroma SDK pointer.</remarks>
        </member>
        <member name="T:Colore.Rest.Data.EffectData">
            <summary>
            Contains data for an effect to be sent to the REST API.
            </summary>
        </member>
        <member name="M:Colore.Rest.Data.EffectData.#ctor(System.Object,System.Object)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.Data.EffectData" /> structure.
            </summary>
            <param name="effect">Type of effect to create, should be a value from one of the <c>Effect</c> enumerations.</param>
            <param name="payload">Effect data, if applicable.</param>
        </member>
        <member name="P:Colore.Rest.Data.EffectData.Effect">
            <summary>
            Gets the type of the effect.
            </summary>
        </member>
        <member name="P:Colore.Rest.Data.EffectData.Payload">
            <summary>
            Gets effect data, or <c>null</c> if not applicable for the current effect type.
            </summary>
        </member>
        <member name="T:Colore.Rest.Data.EffectGroup">
            <summary>
            Represents a collection of <see cref="T:Colore.Rest.Data.EffectData" />.
            </summary>
        </member>
        <member name="M:Colore.Rest.Data.EffectGroup.#ctor(System.Collections.Generic.IEnumerable{Colore.Rest.Data.EffectData})">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.Data.EffectGroup" /> structure.
            </summary>
            <param name="effects"><see cref="T:Colore.Rest.Data.EffectData" /> to include in the group.</param>
        </member>
        <member name="P:Colore.Rest.Data.EffectGroup.Effects">
            <summary>
            Gets the various <see cref="T:Colore.Rest.Data.EffectData" /> contained in this group.
            </summary>
        </member>
        <member name="T:Colore.Rest.Data.HeartbeatResponse">
            <summary>
            Response returned by Chroma REST API on heartbeat requests.
            </summary>
        </member>
        <member name="M:Colore.Rest.Data.HeartbeatResponse.#ctor(System.Int32)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.Data.HeartbeatResponse" /> class.
            </summary>
            <param name="tick">Tick count.</param>
        </member>
        <member name="P:Colore.Rest.Data.HeartbeatResponse.Tick">
            <summary>
            Gets the tick count for this heartbeat.
            </summary>
        </member>
        <member name="T:Colore.Rest.Data.SdkEffectResponse">
            <inheritdoc />
            <summary>
            Contains responses from setting effects with the Razer Chroma REST API.
            </summary>
        </member>
        <member name="M:Colore.Rest.Data.SdkEffectResponse.#ctor(Colore.Data.Result,System.Nullable{System.Guid})">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.Data.SdkEffectResponse" /> class.
            </summary>
            <param name="result">Result code.</param>
            <param name="effectId">Effect ID (<c>null</c> if PUT was used).</param>
        </member>
        <member name="P:Colore.Rest.Data.SdkEffectResponse.EffectId">
            <summary>
            Gets the effect ID obtained from the API call (will be <c>null</c> if PUT was used to create an effect).
            </summary>
        </member>
        <member name="T:Colore.Rest.Data.SdkInitResponse">
            <summary>
            Response returned from Chroma REST API on initialization.
            </summary>
        </member>
        <member name="M:Colore.Rest.Data.SdkInitResponse.#ctor(System.Int32,System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.Data.SdkInitResponse" /> class.
            </summary>
            <param name="session">Session ID.</param>
            <param name="uri">API URI.</param>
        </member>
        <member name="P:Colore.Rest.Data.SdkInitResponse.Session">
            <summary>
            Gets the session ID.
            </summary>
        </member>
        <member name="P:Colore.Rest.Data.SdkInitResponse.Uri">
            <summary>
            Gets the URI to use for subsequent API calls.
            </summary>
        </member>
        <member name="M:Colore.Rest.Data.SdkInitResponse.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Colore.Rest.Data.SdkResponse">
            <summary>
            Contains simple result-only responses from the Razer Chroma REST API.
            </summary>
        </member>
        <member name="M:Colore.Rest.Data.SdkResponse.#ctor(Colore.Data.Result)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.Data.SdkResponse" /> class.
            </summary>
            <param name="result">Result code.</param>
        </member>
        <member name="P:Colore.Rest.Data.SdkResponse.Result">
            <summary>
            Gets the result code obtained from the API call.
            </summary>
        </member>
        <member name="M:Colore.Rest.Data.SdkResponse.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Colore.Rest.IRestClient">
            <inheritdoc />
            <summary>
            Represents a REST API client able to do basic HTTP requests and return response data.
            </summary>
        </member>
        <member name="P:Colore.Rest.IRestClient.BaseAddress">
            <summary>
            Gets or sets the base address where calls will be routed.
            </summary>
        </member>
        <member name="M:Colore.Rest.IRestClient.PostAsync``1(System.String,System.Object)">
            <summary>
            Performs a POST request to the specified resource with the provided data.
            </summary>
            <typeparam name="T">The type of response to expect.</typeparam>
            <param name="resource">Resource path.</param>
            <param name="data">Request data.</param>
            <returns>An instance of <see cref="T:Colore.Rest.IRestResponse`1" />.</returns>
        </member>
        <member name="M:Colore.Rest.IRestClient.PutAsync``1(System.String)">
            <summary>
            Performs a PUT request to the specified resource without any data.
            </summary>
            <typeparam name="T">The type of response to expect.</typeparam>
            <param name="resource">Resource path.</param>
            <returns>An instance of <see cref="T:Colore.Rest.IRestResponse`1" />.</returns>
        </member>
        <member name="M:Colore.Rest.IRestClient.PutAsync``1(System.String,System.Object)">
            <summary>
            Performs a PUT request to the specified resource with the provided data.
            </summary>
            <typeparam name="T">The type of response to expect.</typeparam>
            <param name="resource">Resource path.</param>
            <param name="data">Request data.</param>
            <returns>An instance of <see cref="T:Colore.Rest.IRestResponse`1" />.</returns>
        </member>
        <member name="M:Colore.Rest.IRestClient.DeleteAsync``1(System.String)">
            <summary>
            Performs a DELETE request to the specified resource.
            </summary>
            <typeparam name="T">The type of response to expect.</typeparam>
            <param name="resource">Resource path.</param>
            <returns>An instance of <see cref="T:Colore.Rest.IRestResponse`1" />.</returns>
        </member>
        <member name="M:Colore.Rest.IRestClient.DeleteAsync``1(System.String,System.Object)">
            <summary>
            Performs a DELETE request to the specified resource with the provided data.
            </summary>
            <typeparam name="T">The type of response to expect.</typeparam>
            <param name="resource">Resource path.</param>
            <param name="data">Request data.</param>
            <returns>An instance of <see cref="T:Colore.Rest.IRestResponse`1" />.</returns>
        </member>
        <member name="T:Colore.Rest.IRestResponse`1">
            <summary>
            Represents a response from calling a REST API.
            </summary>
            <typeparam name="TData">The type contained in this response.</typeparam>
        </member>
        <member name="P:Colore.Rest.IRestResponse`1.Status">
            <summary>
            Gets the HTTP status of the response.
            </summary>
        </member>
        <member name="P:Colore.Rest.IRestResponse`1.IsSuccessful">
            <summary>
            Gets a value indicating whether the REST request was successful.
            </summary>
        </member>
        <member name="P:Colore.Rest.IRestResponse`1.Content">
            <summary>
            Gets the body content as a <see cref="T:System.String" />, or <c>null</c> if no content.
            </summary>
        </member>
        <member name="P:Colore.Rest.IRestResponse`1.Data">
            <summary>
            Gets the data returned from the request.
            </summary>
        </member>
        <member name="M:Colore.Rest.IRestResponse`1.Deserialize``1">
            <summary>
            Deserializes the response content into the specified type.
            </summary>
            <typeparam name="T">The type to deserialize into.</typeparam>
            <returns>An instance of <typeparamref name="T" />.</returns>
        </member>
        <member name="T:Colore.Rest.RestApi">
            <inheritdoc cref="T:Colore.Api.IChromaApi" />
            <summary>
            An implementation of the REST API backend for the Chroma SDK.
            </summary>
        </member>
        <member name="F:Colore.Rest.RestApi.DefaultEndpoint">
            <summary>
            Default endpoint for accessing the Chroma SDK on the local machine over HTTP.
            </summary>
        </member>
        <member name="F:Colore.Rest.RestApi.DefaultSslEndpoint">
            <summary>
            Default endpoint for accessing the Chroma SDK on the local machine over HTTPS.
            </summary>
        </member>
        <member name="F:Colore.Rest.RestApi.HeartbeatInterval">
            <summary>
            Interval (in milliseconds) to wait between each heartbeat call.
            </summary>
        </member>
        <member name="F:Colore.Rest.RestApi.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Rest.RestApi._client">
            <summary>
            Underlying <see cref="T:Colore.Rest.IRestClient" /> used for API calls.
            </summary>
        </member>
        <member name="F:Colore.Rest.RestApi._heartbeatTimer">
            <summary>
            Timer to dispatch regular heartbeat calls.
            </summary>
        </member>
        <member name="F:Colore.Rest.RestApi._baseUri">
            <summary>
            The original base URI for the Chroma REST API.
            </summary>
            <remarks>
            Used for calls to init if the SDK was previously initialized,
            to restore the original base address before the new init call.
            </remarks>
        </member>
        <member name="F:Colore.Rest.RestApi._session">
            <summary>
            Keeps track of current session ID.
            </summary>
        </member>
        <member name="M:Colore.Rest.RestApi.#ctor(Colore.Rest.IRestClient)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.RestApi" /> class.
            </summary>
            <param name="client">The instance of <see cref="T:Colore.Rest.IRestClient" /> to use for API calls.</param>
        </member>
        <member name="M:Colore.Rest.RestApi.InitializeAsync(Colore.Data.AppInfo)">
            <inheritdoc />
            <summary>
            Initializes the Chroma SDK by sending a POST request to <c>/razer/chromasdk</c>.
            </summary>
            <param name="info">Information about the application.</param>
            <returns>An object representing the progress of this asynchronous task.</returns>
            <exception cref="T:System.ArgumentNullException">Thrown if <paramref name="info" /> is <c>null</c>.</exception>
            <exception cref="T:Colore.Rest.RestException">Thrown if there is an error calling the REST API.</exception>
        </member>
        <member name="M:Colore.Rest.RestApi.UninitializeAsync">
            <inheritdoc />
            <summary>
            Uninitializes the Chroma SDK by sending a DELETE request to <c>/</c>.
            </summary>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:Colore.Rest.RestException">Thrown if there is an error calling the REST API.</exception>
            <exception cref="T:Colore.Api.ApiException">Thrown if the SDK responds with an error code.</exception>
        </member>
        <member name="M:Colore.Rest.RestApi.QueryDeviceAsync(System.Guid)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Rest.RestApi.SetEffectAsync(System.Guid)">
            <inheritdoc />
            <summary>
            Set effect by sending a PUT request to <c>/effect</c>.
            </summary>
            <param name="effectId">Effect ID to set.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:Colore.Rest.RestException">Thrown if there is an error calling the REST API.</exception>
            <exception cref="T:Colore.Api.ApiException">Thrown if the SDK responds with an error code.</exception>
        </member>
        <member name="M:Colore.Rest.RestApi.DeleteEffectAsync(System.Guid)">
            <inheritdoc />
            <summary>
            Deletes an effect with the specified <see cref="T:System.Guid" /> by sending a DELETE request to <c>/effect</c>.
            </summary>
            <param name="effectId">Effect ID to delete.</param>
            <returns>A <see cref="T:System.Threading.Tasks.Task" /> representing the asynchronous operation.</returns>
            <exception cref="T:Colore.Rest.RestException">Thrown if there is an error calling the REST API.</exception>
            <exception cref="T:Colore.Api.ApiException">Thrown if the SDK responds with an error code.</exception>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateDeviceEffectAsync(System.Guid,Colore.Effects.Generic.EffectType)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Rest.RestApi.CreateDeviceEffectAsync``1(System.Guid,Colore.Effects.Generic.EffectType,``0)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Rest.RestApi.CreateKeyboardEffectAsync(Colore.Effects.Keyboard.KeyboardEffectType)">
            <inheritdoc />
            <summary>
            Creates a new keyboard effect without any effect data by sending a POST request to the keyboard API.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateKeyboardEffectAsync``1(Colore.Effects.Keyboard.KeyboardEffectType,``0)">
            <inheritdoc />
            <summary>
            Creates a new keyboard effect with the specified effect data by sending a POST request to the keyboard API.
            </summary>
            <typeparam name="T">The structure type, needs to be compatible with the effect type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">The effect structure parameter.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateMouseEffectAsync(Colore.Effects.Mouse.MouseEffectType)">
            <inheritdoc />
            <summary>
            Creates a new mouse effect without any effect data by sending a POST request to the mouse API.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateMouseEffectAsync``1(Colore.Effects.Mouse.MouseEffectType,``0)">
            <inheritdoc />
            <summary>
            Creates a new mouse effect with the specified effect data by sending a POST request to the mouse API.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateHeadsetEffectAsync(Colore.Effects.Headset.HeadsetEffectType)">
            <inheritdoc />
            <summary>
            Creates a new headset effect without any effect data by sending a POST request to the headset API.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateHeadsetEffectAsync``1(Colore.Effects.Headset.HeadsetEffectType,``0)">
            <inheritdoc />
            <summary>
            Creates a new headset effect with the specified effect data by sending a POST request to the headset API.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateMousepadEffectAsync(Colore.Effects.Mousepad.MousepadEffectType)">
            <inheritdoc />
            <summary>
            Creates a new mousepad effect without any effect data by sending a POST request to the mousepad API.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateMousepadEffectAsync``1(Colore.Effects.Mousepad.MousepadEffectType,``0)">
            <inheritdoc />
            <summary>
            Creates a new mousepad effect with the specified effect data by sending a POST request to the mousepad API.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateKeypadEffectAsync(Colore.Effects.Keypad.KeypadEffectType)">
            <inheritdoc />
            <summary>
            Creates a new keypad effect without any effect data by sending a POST request to the keypad API.
            </summary>
            <param name="effectType">THe type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateKeypadEffectAsync``1(Colore.Effects.Keypad.KeypadEffectType,``0)">
            <inheritdoc />
            <summary>
            Creates a new keypad effect with the specified effect data by sending a POST request to the keypad API.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateChromaLinkEffectAsync(Colore.Effects.ChromaLink.ChromaLinkEffectType)">
            <inheritdoc />
            <summary>
            Creates a new Chroma Link effect without any effect data by sending a POST request to the Chroma Link API.
            </summary>
            <param name="effectType">The type of effect to create.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateChromaLinkEffectAsync``1(Colore.Effects.ChromaLink.ChromaLinkEffectType,``0)">
            <inheritdoc />
            <summary>
            Creates a new Chroma Link effect with the specified effect data by sending a POST request to the Chroma Link API.
            </summary>
            <typeparam name="T">The effect struct type.</typeparam>
            <param name="effectType">The type of effect to create.</param>
            <param name="data">Effect options struct.</param>
            <returns>A <see cref="T:System.Guid" /> for the created effect.</returns>
        </member>
        <member name="M:Colore.Rest.RestApi.RegisterEventNotifications(System.IntPtr)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Rest.RestApi.UnregisterEventNotifications">
            <inheritdoc />
        </member>
        <member name="M:Colore.Rest.RestApi.Dispose">
            <inheritdoc />
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Colore.Rest.RestApi.SendHeartbeat">
            <summary>
            Handles sending regular calls to the heartbeat API, in order to keep the connection alive.
            </summary>
            <exception cref="T:Colore.Rest.RestException">Thrown if there is an error calling the REST API.</exception>
        </member>
        <member name="M:Colore.Rest.RestApi.CreateEffectAsync(System.String,System.Object)">
            <summary>
            Creates a Chroma effect using the specified API endpoint and effect data.
            </summary>
            <param name="endpoint">Device endpoint to create effect at.</param>
            <param name="data">Effect data.</param>
            <returns>A <see cref="T:System.Guid" /> identifying the newly created effect.</returns>
            <exception cref="T:Colore.Rest.RestException">Thrown if there is an error calling the REST API.</exception>
            <exception cref="T:Colore.Api.ApiException">Thrown if the SDK returns an exception creating the effect.</exception>
        </member>
        <member name="T:Colore.Rest.RestClient">
            <inheritdoc />
            <summary>
            An implementation of <see cref="T:Colore.Rest.IRestClient" />.
            </summary>
        </member>
        <member name="F:Colore.Rest.RestClient.Log">
            <summary>
            Logger instance for this class.
            </summary>
        </member>
        <member name="F:Colore.Rest.RestClient._httpClient">
            <summary>
            The underlying <see cref="T:System.Net.Http.HttpClient" /> performing all requests.
            </summary>
        </member>
        <member name="M:Colore.Rest.RestClient.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.RestClient" /> class.
            </summary>
            <param name="baseAddress">Base address to use.</param>
        </member>
        <member name="M:Colore.Rest.RestClient.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.RestClient" /> class.
            </summary>
            <param name="baseAddress">Base address to use.</param>
        </member>
        <member name="M:Colore.Rest.RestClient.#ctor(System.Uri,System.Net.Http.HttpMessageHandler)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.RestClient" /> class.
            </summary>
            <param name="baseAddress">Base address to use.</param>
            <param name="messageHandler">The message handler to use for the HTTP client.</param>
        </member>
        <member name="P:Colore.Rest.RestClient.BaseAddress">
            <inheritdoc />
            <summary>
            Gets or sets the base address where calls will be routed.
            </summary>
        </member>
        <member name="M:Colore.Rest.RestClient.PostAsync``1(System.String,System.Object)">
            <inheritdoc />
            <summary>
            Performs a POST request to the specified resource with the provided data.
            </summary>
            <typeparam name="T">The type of response to expect.</typeparam>
            <param name="resource">Resource path.</param>
            <param name="data">Request data.</param>
            <returns>An instance of <see cref="T:Colore.Rest.IRestResponse`1"/>.</returns>
        </member>
        <member name="M:Colore.Rest.RestClient.PutAsync``1(System.String)">
            <inheritdoc />
            <summary>
            Performs a PUT request to the specified resource without any data.
            </summary>
            <typeparam name="T">The type of response to expect.</typeparam>
            <param name="resource">Resource path.</param>
            <returns>An instance of <see cref="T:Colore.Rest.IRestResponse`1" />.</returns>
        </member>
        <member name="M:Colore.Rest.RestClient.PutAsync``1(System.String,System.Object)">
            <inheritdoc />
            <summary>
            Performs a PUT request to the specified resource with the provided data.
            </summary>
            <typeparam name="T">The type of response to expect.</typeparam>
            <param name="resource">Resource path.</param>
            <param name="data">Request data.</param>
            <returns>An instance of <see cref="T:Colore.Rest.IRestResponse`1" />.</returns>
        </member>
        <member name="M:Colore.Rest.RestClient.DeleteAsync``1(System.String)">
            <inheritdoc />
            <summary>
            Performs a DELETE request to the specified resource.
            </summary>
            <typeparam name="T">The type of response to expect.</typeparam>
            <param name="resource">Resource path.</param>
            <returns>An instance of <see cref="T:Colore.Rest.IRestResponse`1" />.</returns>
        </member>
        <member name="M:Colore.Rest.RestClient.DeleteAsync``1(System.String,System.Object)">
            <inheritdoc />
            <summary>
            Performs a DELETE request to the specified resource with the provided data.
            </summary>
            <typeparam name="T">The type of response to expect.</typeparam>
            <param name="resource">Resource path.</param>
            <param name="data">Request data.</param>
            <returns>An instance of <see cref="T:Colore.Rest.IRestResponse`1" />.</returns>
        </member>
        <member name="M:Colore.Rest.RestClient.Dispose">
            <inheritdoc />
            <summary>
            Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:Colore.Rest.RestClient.CreateClient(System.Uri,System.Net.Http.HttpMessageHandler)">
            <summary>
            Creates an instance of <see cref="T:System.Net.Http.HttpClient" /> for the specified address.
            </summary>
            <param name="baseAddress">The address to bind the client against.</param>
            <param name="messageHandler">The message handler to use for the HTTP client.</param>
            <returns>An instance of <see cref="T:System.Net.Http.HttpClient" />.</returns>
        </member>
        <member name="M:Colore.Rest.RestClient.CreateUri(System.String)">
            <summary>
            Creates an absolute SDK URI from the supplied resource.
            </summary>
            <param name="resource">The resource (relative SDK URI).</param>
            <returns>An instance of <see cref="T:System.Uri" /> with the absolute SDK URI.</returns>
        </member>
        <member name="M:Colore.Rest.RestClient.CreateUri(System.Uri)">
            <summary>
            Creates an absolute SDK URI from the supplied resource URI.
            </summary>
            <param name="resource">The resource (relative SDK URI).</param>
            <returns>An instance of <see cref="T:System.Uri" /> with the absolute SDK URI.</returns>
        </member>
        <member name="T:Colore.Rest.RestException">
            <inheritdoc />
            <summary>
            Represents an error in the Chroma REST API.
            </summary>
        </member>
        <member name="M:Colore.Rest.RestException.#ctor">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.RestException" /> class.
            </summary>
        </member>
        <member name="M:Colore.Rest.RestException.#ctor(System.String)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.RestException" /> class.
            </summary>
            <param name="message">Exception message.</param>
        </member>
        <member name="M:Colore.Rest.RestException.#ctor(System.String,System.Exception)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.RestException" /> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="innerException">Inner exception.</param>
        </member>
        <member name="M:Colore.Rest.RestException.#ctor(System.String,Colore.Data.Result,System.Uri,System.Net.HttpStatusCode,System.String)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.RestException" /> class.
            </summary>
            <param name="message">Exception message.</param>
            <param name="result">The result code returned from the Chroma SDK.</param>
            <param name="uri">The REST API URI where the exception occurred.</param>
            <param name="statusCode">HTTP status code returned by the API.</param>
            <param name="restData">Any data returned in the API response body.</param>
        </member>
        <member name="P:Colore.Rest.RestException.Uri">
            <summary>
            Gets the <see cref="P:Colore.Rest.RestException.Uri" /> called which caused the exception.
            </summary>
        </member>
        <member name="P:Colore.Rest.RestException.StatusCode">
            <summary>
            Gets the <see cref="T:System.Net.HttpStatusCode" /> returned by the API.
            </summary>
        </member>
        <member name="P:Colore.Rest.RestException.RestData">
            <summary>
            Gets the data (if any) returned by the API.
            </summary>
        </member>
        <member name="T:Colore.Rest.RestResponse`1">
            <inheritdoc />
            <summary>
            Contains the response from calling a REST API method.
            </summary>
            <typeparam name="TData">The type contained in this response.</typeparam>
        </member>
        <member name="M:Colore.Rest.RestResponse`1.#ctor(System.Net.HttpStatusCode,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Colore.Rest.RestResponse`1" /> class.
            </summary>
            <param name="status">HTTP status returned from the API.</param>
            <param name="content">String content returned from the API.</param>
        </member>
        <member name="P:Colore.Rest.RestResponse`1.Status">
            <inheritdoc />
            <summary>
            Gets the HTTP status of the response.
            </summary>
        </member>
        <member name="P:Colore.Rest.RestResponse`1.IsSuccessful">
            <inheritdoc />
            <summary>
            Gets a value indicating whether the request was successful.
            </summary>
        </member>
        <member name="P:Colore.Rest.RestResponse`1.Content">
            <inheritdoc />
            <summary>
            Gets the string content of the response body.
            </summary>
        </member>
        <member name="P:Colore.Rest.RestResponse`1.Data">
            <inheritdoc />
            <summary>
            Gets the typed data returned from the request.
            </summary>
        </member>
        <member name="M:Colore.Rest.RestResponse`1.Deserialize``1">
            <inheritdoc />
            <summary>
            Attempts to deserialize <see cref="P:Colore.Rest.RestResponse`1.Content" /> into the target type.
            </summary>
            <typeparam name="T">The type to deserialize into.</typeparam>
            <returns>An instance of <typeparamref name="T" />.</returns>
        </member>
        <member name="T:Colore.Serialization.ChromaLinkCustomConverter">
            <inheritdoc />
            <summary>
            Converts Chroma Link <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.ChromaLinkCustomConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a Chroma Link <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.ChromaLink.CustomChromaLinkEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.ChromaLinkCustomConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.ChromaLinkCustomConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.ChromaLinkStaticConverter">
            <inheritdoc />
            <summary>
            Converts Chroma Link <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.ChromaLinkStaticConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a Chroma Link <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.ChromaLink.StaticChromaLinkEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.ChromaLinkStaticConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.ChromaLinkStaticConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.ColorConverter">
            <inheritdoc />
            <summary>
            Converts <see cref="T:Colore.Data.Color" /> to/from JSON.
            </summary>
        </member>
        <member name="M:Colore.Serialization.ColorConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>
            Writes the JSON representation of the <see cref="T:Colore.Data.Color" />.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Data.Color" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.ColorConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>
            Reads the JSON representation of a <see cref="T:Colore.Data.Color" />, either in <c>object</c> or <see cref="T:System.UInt32" /> form.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>An instance of <see cref="T:Colore.Data.Color" />.</returns>
        </member>
        <member name="M:Colore.Serialization.ColorConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.DeathstalkerGridConverter">
            <inheritdoc />
            <summary>
            Converts keyboard <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.DeathstalkerGridConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a mousepad <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Keyboard.DeathstalkerGridEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.DeathstalkerGridConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.DeathstalkerGridConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.HeadsetCustomConverter">
            <inheritdoc />
            <summary>
            Converts headset <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.HeadsetCustomConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>
            Writes the JSON representation of a headset <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Headset.CustomHeadsetEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.HeadsetCustomConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.HeadsetCustomConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.HeadsetStaticConverter">
            <inheritdoc />
            <summary>
            Converts headset <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.HeadsetStaticConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a headset <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Headset.StaticHeadsetEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.HeadsetStaticConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.HeadsetStaticConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.KeyboardCustomConverter">
            <inheritdoc />
            <summary>
            Converts keyboard <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.KeyboardCustomConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a keyboard <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.KeyboardCustomConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.KeyboardCustomConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.KeyboardExtendedCustomConverter">
            <inheritdoc />
            <summary>
            Converts keyboard <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" /> objects.</remarks>
        </member>
        <member name="P:Colore.Serialization.KeyboardExtendedCustomConverter.CanRead">
            <inheritdoc />
        </member>
        <member name="P:Colore.Serialization.KeyboardExtendedCustomConverter.CanWrite">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.KeyboardExtendedCustomConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a keyboard <see cref="T:Colore.Effects.Keyboard.ExtendedCustomKeyboardEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Keyboard.CustomKeyboardEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.KeyboardExtendedCustomConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.KeyboardExtendedCustomConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.KeyboardStaticConverter">
            <inheritdoc />
            <summary>
            Converts keyboard <see cref="T:Colore.Effects.Keyboard.StaticKeyboardEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Keyboard.StaticKeyboardEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.KeyboardStaticConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a keyboard <see cref="T:Colore.Effects.Keyboard.StaticKeyboardEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Keyboard.StaticKeyboardEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.KeyboardStaticConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.KeyboardStaticConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.KeypadCustomConverter">
            <inheritdoc />
            <summary>
            Converts keypad <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.KeypadCustomConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a keypad <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Keypad.CustomKeypadEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.KeypadCustomConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.KeypadCustomConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.KeypadStaticConverter">
            <inheritdoc />
            <summary>
            Converts keypad <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.KeypadStaticConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a keypad <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Keypad.StaticKeypadEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.KeypadStaticConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.KeypadStaticConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.MouseCustomConverter">
            <inheritdoc />
            <summary>
            Converts mouse <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.MouseCustomConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a mouse <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Mouse.CustomMouseEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.MouseCustomConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.MouseCustomConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.MousepadCustomConverter">
            <inheritdoc />
            <summary>
            Converts mousepad <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.MousepadCustomConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a mousepad <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Mousepad.CustomMousepadEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.MousepadCustomConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.MousepadCustomConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.MousepadStaticConverter">
            <inheritdoc />
            <summary>
            Converts mousepad <see cref="T:Colore.Effects.Mousepad.StaticMousepadEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Mousepad.StaticMousepadEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.MousepadStaticConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a mousepad <see cref="T:Colore.Effects.Mousepad.StaticMousepadEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Mousepad.StaticMousepadEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.MousepadStaticConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.MousepadStaticConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.MouseStaticConverter">
            <inheritdoc />
            <summary>
            Converts mouse <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> objects to JSON.
            </summary>
            <remarks>Does not support converting JSON into <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> objects.</remarks>
        </member>
        <member name="M:Colore.Serialization.MouseStaticConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>Writes the JSON representation of a mouse <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> object.</summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Effects.Mouse.StaticMouseEffect" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.MouseStaticConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
        </member>
        <member name="M:Colore.Serialization.MouseStaticConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.Serialization.ResultConverter">
            <inheritdoc />
            <summary>
            Converts <see cref="T:Colore.Data.Result" /> objects to/from JSON.
            </summary>
        </member>
        <member name="M:Colore.Serialization.ResultConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>
            Writes the JSON representation of a <see cref="T:Colore.Data.Result" /> object.
            </summary>
            <param name="writer">The <see cref="T:Newtonsoft.Json.JsonWriter" /> to write to.</param>
            <param name="value">The <see cref="T:Colore.Data.Result" /> value.</param>
            <param name="serializer">The calling serializer.</param>
        </member>
        <member name="M:Colore.Serialization.ResultConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)">
            <inheritdoc />
            <summary>
            Reads the JSON representation of the <see cref="T:Colore.Data.Result" /> object.
            </summary>
            <param name="reader">The <see cref="T:Newtonsoft.Json.JsonReader" /> to read from.</param>
            <param name="objectType">Type of the object.</param>
            <param name="existingValue">The existing value of object being read.</param>
            <param name="serializer">The calling serializer.</param>
            <returns>The object value.</returns>
        </member>
        <member name="M:Colore.Serialization.ResultConverter.CanConvert(System.Type)">
            <inheritdoc />
        </member>
        <member name="T:Colore.UnsupportedDeviceException">
            <inheritdoc />
            <summary>
            Thrown when an invalid <see cref="T:System.Guid" /> is passed to the
            constructor of <see cref="T:Colore.Implementations.GenericDeviceImplementation" />.
            </summary>
        </member>
        <member name="F:Colore.UnsupportedDeviceException.MessageTemplate">
            <summary>
            Template for exception message.
            </summary>
        </member>
        <member name="M:Colore.UnsupportedDeviceException.#ctor(System.Guid,System.Exception)">
            <inheritdoc />
            <summary>
            Initializes a new instance of the <see cref="T:Colore.UnsupportedDeviceException" /> class.
            </summary>
            <param name="deviceId">The <see cref="T:System.Guid" /> of the device.</param>
            <param name="innerException">Inner exception object.</param>
        </member>
        <member name="P:Colore.UnsupportedDeviceException.DeviceId">
            <summary>
            Gets the <see cref="T:System.Guid" /> of the device.
            </summary>
        </member>
    </members>
</doc>
